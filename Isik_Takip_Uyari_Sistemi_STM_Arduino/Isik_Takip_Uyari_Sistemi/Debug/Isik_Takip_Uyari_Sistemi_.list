
HW_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800514c  0800514c  0000614c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005238  08005238  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005238  08005238  00006238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005240  08005240  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005240  08005240  00006240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005244  08005244  00006244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005248  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000006c  080052b4  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  080052b4  00007278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b06f  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d2a  00000000  00000000  0001210b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  00013e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000901  00000000  00000000  000149f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001831b  00000000  00000000  000152f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d16c  00000000  00000000  0002d614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000997a6  00000000  00000000  0003a780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3f26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ae8  00000000  00000000  000d3f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d7a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005134 	.word	0x08005134

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005134 	.word	0x08005134

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	@ 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b96a 	b.w	8000b88 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	460c      	mov	r4, r1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d14e      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008d8:	4694      	mov	ip, r2
 80008da:	458c      	cmp	ip, r1
 80008dc:	4686      	mov	lr, r0
 80008de:	fab2 f282 	clz	r2, r2
 80008e2:	d962      	bls.n	80009aa <__udivmoddi4+0xde>
 80008e4:	b14a      	cbz	r2, 80008fa <__udivmoddi4+0x2e>
 80008e6:	f1c2 0320 	rsb	r3, r2, #32
 80008ea:	4091      	lsls	r1, r2
 80008ec:	fa20 f303 	lsr.w	r3, r0, r3
 80008f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f4:	4319      	orrs	r1, r3
 80008f6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008fe:	fa1f f68c 	uxth.w	r6, ip
 8000902:	fbb1 f4f7 	udiv	r4, r1, r7
 8000906:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800090a:	fb07 1114 	mls	r1, r7, r4, r1
 800090e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000912:	fb04 f106 	mul.w	r1, r4, r6
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000922:	f080 8112 	bcs.w	8000b4a <__udivmoddi4+0x27e>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 810f 	bls.w	8000b4a <__udivmoddi4+0x27e>
 800092c:	3c02      	subs	r4, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a59      	subs	r1, r3, r1
 8000932:	fa1f f38e 	uxth.w	r3, lr
 8000936:	fbb1 f0f7 	udiv	r0, r1, r7
 800093a:	fb07 1110 	mls	r1, r7, r0, r1
 800093e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000942:	fb00 f606 	mul.w	r6, r0, r6
 8000946:	429e      	cmp	r6, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x94>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000952:	f080 80fc 	bcs.w	8000b4e <__udivmoddi4+0x282>
 8000956:	429e      	cmp	r6, r3
 8000958:	f240 80f9 	bls.w	8000b4e <__udivmoddi4+0x282>
 800095c:	4463      	add	r3, ip
 800095e:	3802      	subs	r0, #2
 8000960:	1b9b      	subs	r3, r3, r6
 8000962:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000966:	2100      	movs	r1, #0
 8000968:	b11d      	cbz	r5, 8000972 <__udivmoddi4+0xa6>
 800096a:	40d3      	lsrs	r3, r2
 800096c:	2200      	movs	r2, #0
 800096e:	e9c5 3200 	strd	r3, r2, [r5]
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d905      	bls.n	8000986 <__udivmoddi4+0xba>
 800097a:	b10d      	cbz	r5, 8000980 <__udivmoddi4+0xb4>
 800097c:	e9c5 0100 	strd	r0, r1, [r5]
 8000980:	2100      	movs	r1, #0
 8000982:	4608      	mov	r0, r1
 8000984:	e7f5      	b.n	8000972 <__udivmoddi4+0xa6>
 8000986:	fab3 f183 	clz	r1, r3
 800098a:	2900      	cmp	r1, #0
 800098c:	d146      	bne.n	8000a1c <__udivmoddi4+0x150>
 800098e:	42a3      	cmp	r3, r4
 8000990:	d302      	bcc.n	8000998 <__udivmoddi4+0xcc>
 8000992:	4290      	cmp	r0, r2
 8000994:	f0c0 80f0 	bcc.w	8000b78 <__udivmoddi4+0x2ac>
 8000998:	1a86      	subs	r6, r0, r2
 800099a:	eb64 0303 	sbc.w	r3, r4, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	2d00      	cmp	r5, #0
 80009a2:	d0e6      	beq.n	8000972 <__udivmoddi4+0xa6>
 80009a4:	e9c5 6300 	strd	r6, r3, [r5]
 80009a8:	e7e3      	b.n	8000972 <__udivmoddi4+0xa6>
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	f040 8090 	bne.w	8000ad0 <__udivmoddi4+0x204>
 80009b0:	eba1 040c 	sub.w	r4, r1, ip
 80009b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009b8:	fa1f f78c 	uxth.w	r7, ip
 80009bc:	2101      	movs	r1, #1
 80009be:	fbb4 f6f8 	udiv	r6, r4, r8
 80009c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009c6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ce:	fb07 f006 	mul.w	r0, r7, r6
 80009d2:	4298      	cmp	r0, r3
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x11c>
 80009d6:	eb1c 0303 	adds.w	r3, ip, r3
 80009da:	f106 34ff 	add.w	r4, r6, #4294967295
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x11a>
 80009e0:	4298      	cmp	r0, r3
 80009e2:	f200 80cd 	bhi.w	8000b80 <__udivmoddi4+0x2b4>
 80009e6:	4626      	mov	r6, r4
 80009e8:	1a1c      	subs	r4, r3, r0
 80009ea:	fa1f f38e 	uxth.w	r3, lr
 80009ee:	fbb4 f0f8 	udiv	r0, r4, r8
 80009f2:	fb08 4410 	mls	r4, r8, r0, r4
 80009f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009fa:	fb00 f707 	mul.w	r7, r0, r7
 80009fe:	429f      	cmp	r7, r3
 8000a00:	d908      	bls.n	8000a14 <__udivmoddi4+0x148>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a0a:	d202      	bcs.n	8000a12 <__udivmoddi4+0x146>
 8000a0c:	429f      	cmp	r7, r3
 8000a0e:	f200 80b0 	bhi.w	8000b72 <__udivmoddi4+0x2a6>
 8000a12:	4620      	mov	r0, r4
 8000a14:	1bdb      	subs	r3, r3, r7
 8000a16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a1a:	e7a5      	b.n	8000968 <__udivmoddi4+0x9c>
 8000a1c:	f1c1 0620 	rsb	r6, r1, #32
 8000a20:	408b      	lsls	r3, r1
 8000a22:	fa22 f706 	lsr.w	r7, r2, r6
 8000a26:	431f      	orrs	r7, r3
 8000a28:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a2c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a30:	ea43 030c 	orr.w	r3, r3, ip
 8000a34:	40f4      	lsrs	r4, r6
 8000a36:	fa00 f801 	lsl.w	r8, r0, r1
 8000a3a:	0c38      	lsrs	r0, r7, #16
 8000a3c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a40:	fbb4 fef0 	udiv	lr, r4, r0
 8000a44:	fa1f fc87 	uxth.w	ip, r7
 8000a48:	fb00 441e 	mls	r4, r0, lr, r4
 8000a4c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a50:	fb0e f90c 	mul.w	r9, lr, ip
 8000a54:	45a1      	cmp	r9, r4
 8000a56:	fa02 f201 	lsl.w	r2, r2, r1
 8000a5a:	d90a      	bls.n	8000a72 <__udivmoddi4+0x1a6>
 8000a5c:	193c      	adds	r4, r7, r4
 8000a5e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a62:	f080 8084 	bcs.w	8000b6e <__udivmoddi4+0x2a2>
 8000a66:	45a1      	cmp	r9, r4
 8000a68:	f240 8081 	bls.w	8000b6e <__udivmoddi4+0x2a2>
 8000a6c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a70:	443c      	add	r4, r7
 8000a72:	eba4 0409 	sub.w	r4, r4, r9
 8000a76:	fa1f f983 	uxth.w	r9, r3
 8000a7a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a7e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a82:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a86:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a8a:	45a4      	cmp	ip, r4
 8000a8c:	d907      	bls.n	8000a9e <__udivmoddi4+0x1d2>
 8000a8e:	193c      	adds	r4, r7, r4
 8000a90:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a94:	d267      	bcs.n	8000b66 <__udivmoddi4+0x29a>
 8000a96:	45a4      	cmp	ip, r4
 8000a98:	d965      	bls.n	8000b66 <__udivmoddi4+0x29a>
 8000a9a:	3b02      	subs	r3, #2
 8000a9c:	443c      	add	r4, r7
 8000a9e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000aa2:	fba0 9302 	umull	r9, r3, r0, r2
 8000aa6:	eba4 040c 	sub.w	r4, r4, ip
 8000aaa:	429c      	cmp	r4, r3
 8000aac:	46ce      	mov	lr, r9
 8000aae:	469c      	mov	ip, r3
 8000ab0:	d351      	bcc.n	8000b56 <__udivmoddi4+0x28a>
 8000ab2:	d04e      	beq.n	8000b52 <__udivmoddi4+0x286>
 8000ab4:	b155      	cbz	r5, 8000acc <__udivmoddi4+0x200>
 8000ab6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aba:	eb64 040c 	sbc.w	r4, r4, ip
 8000abe:	fa04 f606 	lsl.w	r6, r4, r6
 8000ac2:	40cb      	lsrs	r3, r1
 8000ac4:	431e      	orrs	r6, r3
 8000ac6:	40cc      	lsrs	r4, r1
 8000ac8:	e9c5 6400 	strd	r6, r4, [r5]
 8000acc:	2100      	movs	r1, #0
 8000ace:	e750      	b.n	8000972 <__udivmoddi4+0xa6>
 8000ad0:	f1c2 0320 	rsb	r3, r2, #32
 8000ad4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ad8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000adc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ae0:	4094      	lsls	r4, r2
 8000ae2:	430c      	orrs	r4, r1
 8000ae4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aec:	fa1f f78c 	uxth.w	r7, ip
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3110 	mls	r1, r8, r0, r3
 8000af8:	0c23      	lsrs	r3, r4, #16
 8000afa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afe:	fb00 f107 	mul.w	r1, r0, r7
 8000b02:	4299      	cmp	r1, r3
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x24c>
 8000b06:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b0e:	d22c      	bcs.n	8000b6a <__udivmoddi4+0x29e>
 8000b10:	4299      	cmp	r1, r3
 8000b12:	d92a      	bls.n	8000b6a <__udivmoddi4+0x29e>
 8000b14:	3802      	subs	r0, #2
 8000b16:	4463      	add	r3, ip
 8000b18:	1a5b      	subs	r3, r3, r1
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b20:	fb08 3311 	mls	r3, r8, r1, r3
 8000b24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b28:	fb01 f307 	mul.w	r3, r1, r7
 8000b2c:	42a3      	cmp	r3, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x276>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b38:	d213      	bcs.n	8000b62 <__udivmoddi4+0x296>
 8000b3a:	42a3      	cmp	r3, r4
 8000b3c:	d911      	bls.n	8000b62 <__udivmoddi4+0x296>
 8000b3e:	3902      	subs	r1, #2
 8000b40:	4464      	add	r4, ip
 8000b42:	1ae4      	subs	r4, r4, r3
 8000b44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b48:	e739      	b.n	80009be <__udivmoddi4+0xf2>
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	e6f0      	b.n	8000930 <__udivmoddi4+0x64>
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e706      	b.n	8000960 <__udivmoddi4+0x94>
 8000b52:	45c8      	cmp	r8, r9
 8000b54:	d2ae      	bcs.n	8000ab4 <__udivmoddi4+0x1e8>
 8000b56:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b5a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b5e:	3801      	subs	r0, #1
 8000b60:	e7a8      	b.n	8000ab4 <__udivmoddi4+0x1e8>
 8000b62:	4631      	mov	r1, r6
 8000b64:	e7ed      	b.n	8000b42 <__udivmoddi4+0x276>
 8000b66:	4603      	mov	r3, r0
 8000b68:	e799      	b.n	8000a9e <__udivmoddi4+0x1d2>
 8000b6a:	4630      	mov	r0, r6
 8000b6c:	e7d4      	b.n	8000b18 <__udivmoddi4+0x24c>
 8000b6e:	46d6      	mov	lr, sl
 8000b70:	e77f      	b.n	8000a72 <__udivmoddi4+0x1a6>
 8000b72:	4463      	add	r3, ip
 8000b74:	3802      	subs	r0, #2
 8000b76:	e74d      	b.n	8000a14 <__udivmoddi4+0x148>
 8000b78:	4606      	mov	r6, r0
 8000b7a:	4623      	mov	r3, r4
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	e70f      	b.n	80009a0 <__udivmoddi4+0xd4>
 8000b80:	3e02      	subs	r6, #2
 8000b82:	4463      	add	r3, ip
 8000b84:	e730      	b.n	80009e8 <__udivmoddi4+0x11c>
 8000b86:	bf00      	nop

08000b88 <__aeabi_idiv0>:
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
        Lcd_PortType port[], Lcd_PinType pin[],
        Lcd_PortType rs_port, Lcd_PinType rs_pin,
        Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b08a      	sub	sp, #40	@ 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
 8000b98:	603b      	str	r3, [r7, #0]
    Lcd_HandleTypeDef lcd;

    lcd.mode = mode;
 8000b9a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000b9e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    lcd.en_pin = en_pin;
 8000ba2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000ba6:	84bb      	strh	r3, [r7, #36]	@ 0x24
    lcd.en_port = en_port;
 8000ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000baa:	623b      	str	r3, [r7, #32]

    lcd.rs_pin = rs_pin;
 8000bac:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000bae:	83bb      	strh	r3, [r7, #28]
    lcd.rs_port = rs_port;
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	61bb      	str	r3, [r7, #24]

    lcd.data_pin = pin;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	617b      	str	r3, [r7, #20]
    lcd.data_port = port;
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	613b      	str	r3, [r7, #16]

    Lcd_init(&lcd);
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 f80e 	bl	8000be2 <Lcd_init>

    return lcd;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	461d      	mov	r5, r3
 8000bca:	f107 0410 	add.w	r4, r7, #16
 8000bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bd6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	3728      	adds	r7, #40	@ 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bdb0      	pop	{r4, r5, r7, pc}

08000be2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
    if (lcd->mode == LCD_4_BIT_MODE) {
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	7d9b      	ldrb	r3, [r3, #22]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10c      	bne.n	8000c0c <Lcd_init+0x2a>
        lcd_write_command(lcd, 0x33);
 8000bf2:	2133      	movs	r1, #51	@ 0x33
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f000 f863 	bl	8000cc0 <lcd_write_command>
        lcd_write_command(lcd, 0x32);
 8000bfa:	2132      	movs	r1, #50	@ 0x32
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f000 f85f 	bl	8000cc0 <lcd_write_command>
        lcd_write_command(lcd, FUNCTION_SET | OPT_N); // 4-bit mode
 8000c02:	2128      	movs	r1, #40	@ 0x28
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f000 f85b 	bl	8000cc0 <lcd_write_command>
 8000c0a:	e003      	b.n	8000c14 <Lcd_init+0x32>
    } else {
        lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000c0c:	2138      	movs	r1, #56	@ 0x38
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f000 f856 	bl	8000cc0 <lcd_write_command>
    }

    lcd_write_command(lcd, CLEAR_DISPLAY);                    // Clear screen
 8000c14:	2101      	movs	r1, #1
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f000 f852 	bl	8000cc0 <lcd_write_command>
    lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);   // Lcd-on, cursor-off, no-blink
 8000c1c:	210c      	movs	r1, #12
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f000 f84e 	bl	8000cc0 <lcd_write_command>
    lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);         // Increment cursor
 8000c24:	2106      	movs	r1, #6
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 f84a 	bl	8000cc0 <lcd_write_command>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < strlen(string); i++) {
 8000c3e:	2300      	movs	r3, #0
 8000c40:	73fb      	strb	r3, [r7, #15]
 8000c42:	e00a      	b.n	8000c5a <Lcd_string+0x26>
        lcd_write_data(lcd, string[i]);
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	683a      	ldr	r2, [r7, #0]
 8000c48:	4413      	add	r3, r2
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f000 f864 	bl	8000d1c <lcd_write_data>
    for (uint8_t i = 0; i < strlen(string); i++) {
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	3301      	adds	r3, #1
 8000c58:	73fb      	strb	r3, [r7, #15]
 8000c5a:	7bfc      	ldrb	r4, [r7, #15]
 8000c5c:	6838      	ldr	r0, [r7, #0]
 8000c5e:	f7ff fabf 	bl	80001e0 <strlen>
 8000c62:	4603      	mov	r3, r0
 8000c64:	429c      	cmp	r4, r3
 8000c66:	d3ed      	bcc.n	8000c44 <Lcd_string+0x10>
    }
}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd90      	pop	{r4, r7, pc}
	...

08000c74 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	70fb      	strb	r3, [r7, #3]
 8000c80:	4613      	mov	r3, r2
 8000c82:	70bb      	strb	r3, [r7, #2]
    #ifdef LCD20xN
    lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
    #endif

    #ifdef LCD16xN
    lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000c84:	78fb      	ldrb	r3, [r7, #3]
 8000c86:	4a07      	ldr	r2, [pc, #28]	@ (8000ca4 <Lcd_cursor+0x30>)
 8000c88:	5cd2      	ldrb	r2, [r2, r3]
 8000c8a:	78bb      	ldrb	r3, [r7, #2]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	3b80      	subs	r3, #128	@ 0x80
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	4619      	mov	r1, r3
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f000 f812 	bl	8000cc0 <lcd_write_command>
    #endif
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	080051f0 	.word	0x080051f0

08000ca8 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    lcd_write_command(lcd, CLEAR_DISPLAY);
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f000 f804 	bl	8000cc0 <lcd_write_command>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG); // Write to command register
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6898      	ldr	r0, [r3, #8]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	899b      	ldrh	r3, [r3, #12]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f001 fd36 	bl	8002748 <HAL_GPIO_WritePin>

    if (lcd->mode == LCD_4_BIT_MODE) {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	7d9b      	ldrb	r3, [r3, #22]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d111      	bne.n	8000d08 <lcd_write_command+0x48>
        lcd_write(lcd, (command >> 4), LCD_NIB);
 8000ce4:	78fb      	ldrb	r3, [r7, #3]
 8000ce6:	091b      	lsrs	r3, r3, #4
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2204      	movs	r2, #4
 8000cec:	4619      	mov	r1, r3
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f000 f842 	bl	8000d78 <lcd_write>
        lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000cf4:	78fb      	ldrb	r3, [r7, #3]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2204      	movs	r2, #4
 8000cfe:	4619      	mov	r1, r3
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f000 f839 	bl	8000d78 <lcd_write>
    } else {
        lcd_write(lcd, command, LCD_BYTE);
    }
}
 8000d06:	e005      	b.n	8000d14 <lcd_write_command+0x54>
        lcd_write(lcd, command, LCD_BYTE);
 8000d08:	78fb      	ldrb	r3, [r7, #3]
 8000d0a:	2208      	movs	r2, #8
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f000 f832 	bl	8000d78 <lcd_write>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG); // Write to data register
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6898      	ldr	r0, [r3, #8]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	899b      	ldrh	r3, [r3, #12]
 8000d30:	2201      	movs	r2, #1
 8000d32:	4619      	mov	r1, r3
 8000d34:	f001 fd08 	bl	8002748 <HAL_GPIO_WritePin>

    if (lcd->mode == LCD_4_BIT_MODE) {
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7d9b      	ldrb	r3, [r3, #22]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d111      	bne.n	8000d64 <lcd_write_data+0x48>
        lcd_write(lcd, data >> 4, LCD_NIB);
 8000d40:	78fb      	ldrb	r3, [r7, #3]
 8000d42:	091b      	lsrs	r3, r3, #4
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2204      	movs	r2, #4
 8000d48:	4619      	mov	r1, r3
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 f814 	bl	8000d78 <lcd_write>
        lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000d50:	78fb      	ldrb	r3, [r7, #3]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2204      	movs	r2, #4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 f80b 	bl	8000d78 <lcd_write>
    } else {
        lcd_write(lcd, data, LCD_BYTE);
    }
}
 8000d62:	e005      	b.n	8000d70 <lcd_write_data+0x54>
        lcd_write(lcd, data, LCD_BYTE);
 8000d64:	78fb      	ldrb	r3, [r7, #3]
 8000d66:	2208      	movs	r2, #8
 8000d68:	4619      	mov	r1, r3
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f000 f804 	bl	8000d78 <lcd_write>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	70fb      	strb	r3, [r7, #3]
 8000d84:	4613      	mov	r3, r2
 8000d86:	70bb      	strb	r3, [r7, #2]
    for (uint8_t i = 0; i < len; i++) {
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e019      	b.n	8000dc2 <lcd_write+0x4a>
        HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	4413      	add	r3, r2
 8000d98:	6818      	ldr	r0, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	4413      	add	r3, r2
 8000da4:	8819      	ldrh	r1, [r3, #0]
 8000da6:	78fa      	ldrb	r2, [r7, #3]
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	fa42 f303 	asr.w	r3, r2, r3
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	461a      	mov	r2, r3
 8000db8:	f001 fcc6 	bl	8002748 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < len; i++) {
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	73fb      	strb	r3, [r7, #15]
 8000dc2:	7bfa      	ldrb	r2, [r7, #15]
 8000dc4:	78bb      	ldrb	r3, [r7, #2]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d3e1      	bcc.n	8000d8e <lcd_write+0x16>
    }

    HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6918      	ldr	r0, [r3, #16]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	8a9b      	ldrh	r3, [r3, #20]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f001 fcb7 	bl	8002748 <HAL_GPIO_WritePin>
    DELAY(1);
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f000 fe24 	bl	8001a28 <HAL_Delay>
    HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); // Data receive on falling edge
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6918      	ldr	r0, [r3, #16]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	8a9b      	ldrh	r3, [r3, #20]
 8000de8:	2200      	movs	r2, #0
 8000dea:	4619      	mov	r1, r3
 8000dec:	f001 fcac 	bl	8002748 <HAL_GPIO_WritePin>
}
 8000df0:	bf00      	nop
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <Get_Light_Percentage>:
void Set_RGB_Color(uint8_t red, uint8_t green, uint8_t blue);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t Get_Light_Percentage(uint32_t adc_value) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
    const uint32_t ADC_MAX = 4095; // 12-bit ADC maksimum değeri
 8000e00:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000e04:	60fb      	str	r3, [r7, #12]
    uint16_t percentage = (uint16_t)((1.0 - ((float)adc_value / ADC_MAX)) * 100);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	ee07 3a90 	vmov	s15, r3
 8000e0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	ee07 3a90 	vmov	s15, r3
 8000e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e1a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000e1e:	ee16 0a90 	vmov	r0, s13
 8000e22:	f7ff fcc3 	bl	80007ac <__aeabi_f2d>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	f04f 0000 	mov.w	r0, #0
 8000e2e:	490f      	ldr	r1, [pc, #60]	@ (8000e6c <Get_Light_Percentage+0x74>)
 8000e30:	f7ff fb5c 	bl	80004ec <__aeabi_dsub>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	4610      	mov	r0, r2
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f04f 0200 	mov.w	r2, #0
 8000e40:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <Get_Light_Percentage+0x78>)
 8000e42:	f7ff fa25 	bl	8000290 <__aeabi_dmul>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f7ff fd05 	bl	800085c <__aeabi_d2uiz>
 8000e52:	4603      	mov	r3, r0
 8000e54:	817b      	strh	r3, [r7, #10]
    printf("ADC Value: %u, Light Percentage: %u%%\n", adc_value, percentage); // Hata ayıklama
 8000e56:	897b      	ldrh	r3, [r7, #10]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	4805      	ldr	r0, [pc, #20]	@ (8000e74 <Get_Light_Percentage+0x7c>)
 8000e5e:	f003 f911 	bl	8004084 <iprintf>
    return percentage;
 8000e62:	897b      	ldrh	r3, [r7, #10]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	3ff00000 	.word	0x3ff00000
 8000e70:	40590000 	.word	0x40590000
 8000e74:	0800514c 	.word	0x0800514c

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b5b0      	push	{r4, r5, r7, lr}
 8000e7a:	b09a      	sub	sp, #104	@ 0x68
 8000e7c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7e:	f000 fd61 	bl	8001944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e82:	f000 f977 	bl	8001174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e86:	f000 faa7 	bl	80013d8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e8a:	f000 fa2f 	bl	80012ec <MX_TIM2_Init>
  MX_ADC1_Init();
 8000e8e:	f000 f9db 	bl	8001248 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e92:	2104      	movs	r1, #4
 8000e94:	48a6      	ldr	r0, [pc, #664]	@ (8001130 <main+0x2b8>)
 8000e96:	f002 f97d 	bl	8003194 <HAL_TIM_PWM_Start>


  // LCD tanımları
  Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
 8000e9a:	4ba6      	ldr	r3, [pc, #664]	@ (8001134 <main+0x2bc>)
 8000e9c:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8000ea0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ea2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Lcd_PinType pins[] = { GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_6 }; // D4=PC7, D5=PB6, D6=PA7, D7=PA6
 8000ea6:	4aa4      	ldr	r2, [pc, #656]	@ (8001138 <main+0x2c0>)
 8000ea8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000eac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eb0:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;
  lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 8000eb4:	4638      	mov	r0, r7
 8000eb6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000eba:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	9303      	str	r3, [sp, #12]
 8000ec2:	2310      	movs	r3, #16
 8000ec4:	9302      	str	r3, [sp, #8]
 8000ec6:	4b9d      	ldr	r3, [pc, #628]	@ (800113c <main+0x2c4>)
 8000ec8:	9301      	str	r3, [sp, #4]
 8000eca:	2320      	movs	r3, #32
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	4b9b      	ldr	r3, [pc, #620]	@ (800113c <main+0x2c4>)
 8000ed0:	f7ff fe5c 	bl	8000b8c <Lcd_create>
 8000ed4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000ed8:	463d      	mov	r5, r7
 8000eda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ede:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ee2:	e884 0003 	stmia.w	r4, {r0, r1}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET) // Butona basıldıysa
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	4895      	ldr	r0, [pc, #596]	@ (8001140 <main+0x2c8>)
 8000eea:	f001 fc15 	bl	8002718 <HAL_GPIO_ReadPin>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d159      	bne.n	8000fa8 <main+0x130>
      {
          HAL_Delay(50); // Debounce için kısa bir gecikme
 8000ef4:	2032      	movs	r0, #50	@ 0x32
 8000ef6:	f000 fd97 	bl	8001a28 <HAL_Delay>
          if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET) // Tekrar kontrol
 8000efa:	2120      	movs	r1, #32
 8000efc:	4890      	ldr	r0, [pc, #576]	@ (8001140 <main+0x2c8>)
 8000efe:	f001 fc0b 	bl	8002718 <HAL_GPIO_ReadPin>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d14f      	bne.n	8000fa8 <main+0x130>
          {
              while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET); // Buton bırakılana kadar bekle
 8000f08:	bf00      	nop
 8000f0a:	2120      	movs	r1, #32
 8000f0c:	488c      	ldr	r0, [pc, #560]	@ (8001140 <main+0x2c8>)
 8000f0e:	f001 fc03 	bl	8002718 <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0f8      	beq.n	8000f0a <main+0x92>
              system_active = !system_active; // Sistem durumunu değiştir
 8000f18:	4b8a      	ldr	r3, [pc, #552]	@ (8001144 <main+0x2cc>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	bf0c      	ite	eq
 8000f20:	2301      	moveq	r3, #1
 8000f22:	2300      	movne	r3, #0
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b86      	ldr	r3, [pc, #536]	@ (8001144 <main+0x2cc>)
 8000f2a:	701a      	strb	r2, [r3, #0]

              if (system_active)
 8000f2c:	4b85      	ldr	r3, [pc, #532]	@ (8001144 <main+0x2cc>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d00b      	beq.n	8000f4c <main+0xd4>
              {
                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); // Eklenen LED'i kapat
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f3a:	4880      	ldr	r0, [pc, #512]	@ (800113c <main+0x2c4>)
 8000f3c:	f001 fc04 	bl	8002748 <HAL_GPIO_WritePin>
                  Lcd_clear(&lcd); // LCD'yi tamamen temizle
 8000f40:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff feaf 	bl	8000ca8 <Lcd_clear>
 8000f4a:	e02d      	b.n	8000fa8 <main+0x130>
              }
              else
              {
                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); // Eklenen LED'i aç
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f52:	487a      	ldr	r0, [pc, #488]	@ (800113c <main+0x2c4>)
 8000f54:	f001 fbf8 	bl	8002748 <HAL_GPIO_WritePin>
                  Set_RGB_Color(0, 0, 0); // RGB LED'i söndür
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f000 fad3 	bl	8001508 <Set_RGB_Color>
                  Lcd_cursor(&lcd, 0, 0);
 8000f62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fe82 	bl	8000c74 <Lcd_cursor>
                  Lcd_string(&lcd, "System Paused   "); // LCD'yi temizle
 8000f70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f74:	4974      	ldr	r1, [pc, #464]	@ (8001148 <main+0x2d0>)
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fe5c 	bl	8000c34 <Lcd_string>
                  Lcd_cursor(&lcd, 1, 0);
 8000f7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f80:	2200      	movs	r2, #0
 8000f82:	2101      	movs	r1, #1
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fe75 	bl	8000c74 <Lcd_cursor>
                  Lcd_string(&lcd, "                ");
 8000f8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f8e:	496f      	ldr	r1, [pc, #444]	@ (800114c <main+0x2d4>)
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fe4f 	bl	8000c34 <Lcd_string>
                  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET); // Buzzer'ı kapat
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f9c:	4868      	ldr	r0, [pc, #416]	@ (8001140 <main+0x2c8>)
 8000f9e:	f001 fbd3 	bl	8002748 <HAL_GPIO_WritePin>
                  buzzer_active = 0; // Buzzer'ı durdur
 8000fa2:	4b6b      	ldr	r3, [pc, #428]	@ (8001150 <main+0x2d8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
              }
          }
      }

      if (system_active)
 8000fa8:	4b66      	ldr	r3, [pc, #408]	@ (8001144 <main+0x2cc>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d09a      	beq.n	8000ee6 <main+0x6e>
      {
          HAL_ADC_Start(&hadc1);
 8000fb0:	4868      	ldr	r0, [pc, #416]	@ (8001154 <main+0x2dc>)
 8000fb2:	f000 fda1 	bl	8001af8 <HAL_ADC_Start>

          HAL_ADC_PollForConversion(&hadc1, 10);
 8000fb6:	210a      	movs	r1, #10
 8000fb8:	4866      	ldr	r0, [pc, #408]	@ (8001154 <main+0x2dc>)
 8000fba:	f000 fe51 	bl	8001c60 <HAL_ADC_PollForConversion>

          adc_res = HAL_ADC_GetValue(&hadc1);
 8000fbe:	4865      	ldr	r0, [pc, #404]	@ (8001154 <main+0x2dc>)
 8000fc0:	f000 fed9 	bl	8001d76 <HAL_ADC_GetValue>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	4b63      	ldr	r3, [pc, #396]	@ (8001158 <main+0x2e0>)
 8000fca:	801a      	strh	r2, [r3, #0]
          light_percentage = Get_Light_Percentage(adc_res);
 8000fcc:	4b62      	ldr	r3, [pc, #392]	@ (8001158 <main+0x2e0>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff11 	bl	8000df8 <Get_Light_Percentage>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b60      	ldr	r3, [pc, #384]	@ (800115c <main+0x2e4>)
 8000fdc:	801a      	strh	r2, [r3, #0]

          // LCD'nin ilk satırında ışık yüzdesini göster
          char lcd_line1[16];
          snprintf(lcd_line1, sizeof(lcd_line1), "Light: %d%%", light_percentage);
 8000fde:	4b5f      	ldr	r3, [pc, #380]	@ (800115c <main+0x2e4>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	f107 0018 	add.w	r0, r7, #24
 8000fe6:	4a5e      	ldr	r2, [pc, #376]	@ (8001160 <main+0x2e8>)
 8000fe8:	2110      	movs	r1, #16
 8000fea:	f003 f85d 	bl	80040a8 <sniprintf>
          Lcd_cursor(&lcd, 0, 0);
 8000fee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fe3c 	bl	8000c74 <Lcd_cursor>
          Lcd_string(&lcd, lcd_line1);
 8000ffc:	f107 0218 	add.w	r2, r7, #24
 8001000:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001004:	4611      	mov	r1, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fe14 	bl	8000c34 <Lcd_string>

          // LCD'nin ikinci satırında ışık seviyesini göster
          Lcd_cursor(&lcd, 1, 0);
 800100c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001010:	2200      	movs	r2, #0
 8001012:	2101      	movs	r1, #1
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fe2d 	bl	8000c74 <Lcd_cursor>
          if (adc_res >= 2500) // Karanlık
 800101a:	4b4f      	ldr	r3, [pc, #316]	@ (8001158 <main+0x2e0>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001022:	4293      	cmp	r3, r2
 8001024:	d918      	bls.n	8001058 <main+0x1e0>
          {
              Set_RGB_Color(0, 0, 1); // Mavi
 8001026:	2201      	movs	r2, #1
 8001028:	2100      	movs	r1, #0
 800102a:	2000      	movs	r0, #0
 800102c:	f000 fa6c 	bl	8001508 <Set_RGB_Color>
              Lcd_string(&lcd, "Dark           ");
 8001030:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001034:	494b      	ldr	r1, [pc, #300]	@ (8001164 <main+0x2ec>)
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fdfc 	bl	8000c34 <Lcd_string>
              __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 175);
 800103c:	4b3c      	ldr	r3, [pc, #240]	@ (8001130 <main+0x2b8>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	22af      	movs	r2, #175	@ 0xaf
 8001042:	639a      	str	r2, [r3, #56]	@ 0x38
              HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET); // Buzzer kapalı
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800104a:	483d      	ldr	r0, [pc, #244]	@ (8001140 <main+0x2c8>)
 800104c:	f001 fb7c 	bl	8002748 <HAL_GPIO_WritePin>
              buzzer_active = 0; // Buzzer'ı durdur
 8001050:	4b3f      	ldr	r3, [pc, #252]	@ (8001150 <main+0x2d8>)
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
 8001056:	e04d      	b.n	80010f4 <main+0x27c>
          }
          else if (adc_res < 2500 && adc_res >= 1500) // Orta ışık
 8001058:	4b3f      	ldr	r3, [pc, #252]	@ (8001158 <main+0x2e0>)
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001060:	4293      	cmp	r3, r2
 8001062:	d81f      	bhi.n	80010a4 <main+0x22c>
 8001064:	4b3c      	ldr	r3, [pc, #240]	@ (8001158 <main+0x2e0>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	f240 52db 	movw	r2, #1499	@ 0x5db
 800106c:	4293      	cmp	r3, r2
 800106e:	d919      	bls.n	80010a4 <main+0x22c>
          {
              Set_RGB_Color(0, 1, 0); // Yeşil
 8001070:	2200      	movs	r2, #0
 8001072:	2101      	movs	r1, #1
 8001074:	2000      	movs	r0, #0
 8001076:	f000 fa47 	bl	8001508 <Set_RGB_Color>
              Lcd_string(&lcd, "Normal         ");
 800107a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800107e:	493a      	ldr	r1, [pc, #232]	@ (8001168 <main+0x2f0>)
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fdd7 	bl	8000c34 <Lcd_string>
              __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 443);
 8001086:	4b2a      	ldr	r3, [pc, #168]	@ (8001130 <main+0x2b8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f240 12bb 	movw	r2, #443	@ 0x1bb
 800108e:	639a      	str	r2, [r3, #56]	@ 0x38
              HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET); // Buzzer kapalı
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001096:	482a      	ldr	r0, [pc, #168]	@ (8001140 <main+0x2c8>)
 8001098:	f001 fb56 	bl	8002748 <HAL_GPIO_WritePin>
              buzzer_active = 0; // Buzzer'ı durdur
 800109c:	4b2c      	ldr	r3, [pc, #176]	@ (8001150 <main+0x2d8>)
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
 80010a2:	e027      	b.n	80010f4 <main+0x27c>
          }
          else if (adc_res < 1500) // Fazla ışık
 80010a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001158 <main+0x2e0>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	f240 52db 	movw	r2, #1499	@ 0x5db
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d821      	bhi.n	80010f4 <main+0x27c>
          {
              Set_RGB_Color(1, 0, 0); // Kırmızı
 80010b0:	2200      	movs	r2, #0
 80010b2:	2100      	movs	r1, #0
 80010b4:	2001      	movs	r0, #1
 80010b6:	f000 fa27 	bl	8001508 <Set_RGB_Color>
              Lcd_string(&lcd, "Very Bright    ");
 80010ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010be:	492b      	ldr	r1, [pc, #172]	@ (800116c <main+0x2f4>)
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fdb7 	bl	8000c34 <Lcd_string>
              __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 710);
 80010c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001130 <main+0x2b8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f240 22c6 	movw	r2, #710	@ 0x2c6
 80010ce:	639a      	str	r2, [r3, #56]	@ 0x38

              if (!buzzer_active) // Eğer buzzer aktif değilse
 80010d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001150 <main+0x2d8>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d10d      	bne.n	80010f4 <main+0x27c>
              {
                  buzzer_active = 1;
 80010d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001150 <main+0x2d8>)
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
                  buzzer_start_time = HAL_GetTick(); // Başlangıç zamanını al
 80010de:	f000 fc97 	bl	8001a10 <HAL_GetTick>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4a22      	ldr	r2, [pc, #136]	@ (8001170 <main+0x2f8>)
 80010e6:	6013      	str	r3, [r2, #0]
                  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET); // Buzzer'ı çalıştır
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010ee:	4814      	ldr	r0, [pc, #80]	@ (8001140 <main+0x2c8>)
 80010f0:	f001 fb2a 	bl	8002748 <HAL_GPIO_WritePin>
              }
          }

          // Buzzer için zaman kontrolü
          if (buzzer_active && (HAL_GetTick() - buzzer_start_time >= 1000)) // 3 saniye geçtiyse
 80010f4:	4b16      	ldr	r3, [pc, #88]	@ (8001150 <main+0x2d8>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d015      	beq.n	8001128 <main+0x2b0>
 80010fc:	f000 fc88 	bl	8001a10 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	4b1b      	ldr	r3, [pc, #108]	@ (8001170 <main+0x2f8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800110c:	d30c      	bcc.n	8001128 <main+0x2b0>
          {
              HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET); // Buzzer'ı kapat
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001114:	480a      	ldr	r0, [pc, #40]	@ (8001140 <main+0x2c8>)
 8001116:	f001 fb17 	bl	8002748 <HAL_GPIO_WritePin>
              HAL_Delay(1000);
 800111a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800111e:	f000 fc83 	bl	8001a28 <HAL_Delay>
              buzzer_active = 0;
 8001122:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <main+0x2d8>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
          }

          HAL_Delay(50); // Döngü gecikmesi
 8001128:	2032      	movs	r0, #50	@ 0x32
 800112a:	f000 fc7d 	bl	8001a28 <HAL_Delay>
      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET) // Butona basıldıysa
 800112e:	e6da      	b.n	8000ee6 <main+0x6e>
 8001130:	200000d0 	.word	0x200000d0
 8001134:	080051d8 	.word	0x080051d8
 8001138:	080051e8 	.word	0x080051e8
 800113c:	40020400 	.word	0x40020400
 8001140:	40020000 	.word	0x40020000
 8001144:	20000000 	.word	0x20000000
 8001148:	08005174 	.word	0x08005174
 800114c:	08005188 	.word	0x08005188
 8001150:	2000011c 	.word	0x2000011c
 8001154:	20000088 	.word	0x20000088
 8001158:	20000118 	.word	0x20000118
 800115c:	2000011a 	.word	0x2000011a
 8001160:	0800519c 	.word	0x0800519c
 8001164:	080051a8 	.word	0x080051a8
 8001168:	080051b8 	.word	0x080051b8
 800116c:	080051c8 	.word	0x080051c8
 8001170:	20000120 	.word	0x20000120

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b094      	sub	sp, #80	@ 0x50
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 0320 	add.w	r3, r7, #32
 800117e:	2230      	movs	r2, #48	@ 0x30
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f003 f807 	bl	8004196 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	4b28      	ldr	r3, [pc, #160]	@ (8001240 <SystemClock_Config+0xcc>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a0:	4a27      	ldr	r2, [pc, #156]	@ (8001240 <SystemClock_Config+0xcc>)
 80011a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a8:	4b25      	ldr	r3, [pc, #148]	@ (8001240 <SystemClock_Config+0xcc>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	4b22      	ldr	r3, [pc, #136]	@ (8001244 <SystemClock_Config+0xd0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a21      	ldr	r2, [pc, #132]	@ (8001244 <SystemClock_Config+0xd0>)
 80011be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001244 <SystemClock_Config+0xd0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d0:	2301      	movs	r3, #1
 80011d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011da:	2302      	movs	r3, #2
 80011dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011e4:	2304      	movs	r3, #4
 80011e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80011e8:	2364      	movs	r3, #100	@ 0x64
 80011ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ec:	2302      	movs	r3, #2
 80011ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011f0:	2304      	movs	r3, #4
 80011f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f4:	f107 0320 	add.w	r3, r7, #32
 80011f8:	4618      	mov	r0, r3
 80011fa:	f001 fabf 	bl	800277c <HAL_RCC_OscConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001204:	f000 f9b4 	bl	8001570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001208:	230f      	movs	r3, #15
 800120a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120c:	2302      	movs	r3, #2
 800120e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001214:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001218:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800121a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800121e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	2103      	movs	r1, #3
 8001226:	4618      	mov	r0, r3
 8001228:	f001 fd20 	bl	8002c6c <HAL_RCC_ClockConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001232:	f000 f99d 	bl	8001570 <Error_Handler>
  }
}
 8001236:	bf00      	nop
 8001238:	3750      	adds	r7, #80	@ 0x50
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800
 8001244:	40007000 	.word	0x40007000

08001248 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800124e:	463b      	mov	r3, r7
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800125a:	4b21      	ldr	r3, [pc, #132]	@ (80012e0 <MX_ADC1_Init+0x98>)
 800125c:	4a21      	ldr	r2, [pc, #132]	@ (80012e4 <MX_ADC1_Init+0x9c>)
 800125e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001260:	4b1f      	ldr	r3, [pc, #124]	@ (80012e0 <MX_ADC1_Init+0x98>)
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001266:	4b1e      	ldr	r3, [pc, #120]	@ (80012e0 <MX_ADC1_Init+0x98>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800126c:	4b1c      	ldr	r3, [pc, #112]	@ (80012e0 <MX_ADC1_Init+0x98>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001272:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <MX_ADC1_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001278:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <MX_ADC1_Init+0x98>)
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001280:	4b17      	ldr	r3, [pc, #92]	@ (80012e0 <MX_ADC1_Init+0x98>)
 8001282:	2200      	movs	r2, #0
 8001284:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001286:	4b16      	ldr	r3, [pc, #88]	@ (80012e0 <MX_ADC1_Init+0x98>)
 8001288:	4a17      	ldr	r2, [pc, #92]	@ (80012e8 <MX_ADC1_Init+0xa0>)
 800128a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800128c:	4b14      	ldr	r3, [pc, #80]	@ (80012e0 <MX_ADC1_Init+0x98>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001292:	4b13      	ldr	r3, [pc, #76]	@ (80012e0 <MX_ADC1_Init+0x98>)
 8001294:	2201      	movs	r2, #1
 8001296:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001298:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <MX_ADC1_Init+0x98>)
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <MX_ADC1_Init+0x98>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012a6:	480e      	ldr	r0, [pc, #56]	@ (80012e0 <MX_ADC1_Init+0x98>)
 80012a8:	f000 fbe2 	bl	8001a70 <HAL_ADC_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012b2:	f000 f95d 	bl	8001570 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012ba:	2301      	movs	r3, #1
 80012bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c2:	463b      	mov	r3, r7
 80012c4:	4619      	mov	r1, r3
 80012c6:	4806      	ldr	r0, [pc, #24]	@ (80012e0 <MX_ADC1_Init+0x98>)
 80012c8:	f000 fd62 	bl	8001d90 <HAL_ADC_ConfigChannel>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80012d2:	f000 f94d 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000088 	.word	0x20000088
 80012e4:	40012000 	.word	0x40012000
 80012e8:	0f000001 	.word	0x0f000001

080012ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08e      	sub	sp, #56	@ 0x38
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	f107 0320 	add.w	r3, r7, #32
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
 8001318:	615a      	str	r2, [r3, #20]
 800131a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800131c:	4b2d      	ldr	r3, [pc, #180]	@ (80013d4 <MX_TIM2_Init+0xe8>)
 800131e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001322:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8001324:	4b2b      	ldr	r3, [pc, #172]	@ (80013d4 <MX_TIM2_Init+0xe8>)
 8001326:	22b3      	movs	r2, #179	@ 0xb3
 8001328:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132a:	4b2a      	ldr	r3, [pc, #168]	@ (80013d4 <MX_TIM2_Init+0xe8>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001330:	4b28      	ldr	r3, [pc, #160]	@ (80013d4 <MX_TIM2_Init+0xe8>)
 8001332:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001336:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001338:	4b26      	ldr	r3, [pc, #152]	@ (80013d4 <MX_TIM2_Init+0xe8>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133e:	4b25      	ldr	r3, [pc, #148]	@ (80013d4 <MX_TIM2_Init+0xe8>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001344:	4823      	ldr	r0, [pc, #140]	@ (80013d4 <MX_TIM2_Init+0xe8>)
 8001346:	f001 fe7d 	bl	8003044 <HAL_TIM_Base_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001350:	f000 f90e 	bl	8001570 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001354:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001358:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800135a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800135e:	4619      	mov	r1, r3
 8001360:	481c      	ldr	r0, [pc, #112]	@ (80013d4 <MX_TIM2_Init+0xe8>)
 8001362:	f002 f979 	bl	8003658 <HAL_TIM_ConfigClockSource>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800136c:	f000 f900 	bl	8001570 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001370:	4818      	ldr	r0, [pc, #96]	@ (80013d4 <MX_TIM2_Init+0xe8>)
 8001372:	f001 feb6 	bl	80030e2 <HAL_TIM_PWM_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800137c:	f000 f8f8 	bl	8001570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001388:	f107 0320 	add.w	r3, r7, #32
 800138c:	4619      	mov	r1, r3
 800138e:	4811      	ldr	r0, [pc, #68]	@ (80013d4 <MX_TIM2_Init+0xe8>)
 8001390:	f002 fd34 	bl	8003dfc <HAL_TIMEx_MasterConfigSynchronization>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800139a:	f000 f8e9 	bl	8001570 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800139e:	2360      	movs	r3, #96	@ 0x60
 80013a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	2204      	movs	r2, #4
 80013b2:	4619      	mov	r1, r3
 80013b4:	4807      	ldr	r0, [pc, #28]	@ (80013d4 <MX_TIM2_Init+0xe8>)
 80013b6:	f002 f88d 	bl	80034d4 <HAL_TIM_PWM_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013c0:	f000 f8d6 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013c4:	4803      	ldr	r0, [pc, #12]	@ (80013d4 <MX_TIM2_Init+0xe8>)
 80013c6:	f000 f96b 	bl	80016a0 <HAL_TIM_MspPostInit>

}
 80013ca:	bf00      	nop
 80013cc:	3738      	adds	r7, #56	@ 0x38
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200000d0 	.word	0x200000d0

080013d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	@ 0x28
 80013dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	4b41      	ldr	r3, [pc, #260]	@ (80014f8 <MX_GPIO_Init+0x120>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	4a40      	ldr	r2, [pc, #256]	@ (80014f8 <MX_GPIO_Init+0x120>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fe:	4b3e      	ldr	r3, [pc, #248]	@ (80014f8 <MX_GPIO_Init+0x120>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b3a      	ldr	r3, [pc, #232]	@ (80014f8 <MX_GPIO_Init+0x120>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a39      	ldr	r2, [pc, #228]	@ (80014f8 <MX_GPIO_Init+0x120>)
 8001414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b37      	ldr	r3, [pc, #220]	@ (80014f8 <MX_GPIO_Init+0x120>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	4b33      	ldr	r3, [pc, #204]	@ (80014f8 <MX_GPIO_Init+0x120>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	4a32      	ldr	r2, [pc, #200]	@ (80014f8 <MX_GPIO_Init+0x120>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6313      	str	r3, [r2, #48]	@ 0x30
 8001436:	4b30      	ldr	r3, [pc, #192]	@ (80014f8 <MX_GPIO_Init+0x120>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b2c      	ldr	r3, [pc, #176]	@ (80014f8 <MX_GPIO_Init+0x120>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	4a2b      	ldr	r2, [pc, #172]	@ (80014f8 <MX_GPIO_Init+0x120>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	6313      	str	r3, [r2, #48]	@ 0x30
 8001452:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <MX_GPIO_Init+0x120>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|RGB_G_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	f44f 611c 	mov.w	r1, #2496	@ 0x9c0
 8001464:	4825      	ldr	r0, [pc, #148]	@ (80014fc <MX_GPIO_Init+0x124>)
 8001466:	f001 f96f 	bl	8002748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RGB_R_Pin|RGB_B_Pin|GPIO_PIN_4|GPIO_PIN_5
 800146a:	2200      	movs	r2, #0
 800146c:	f44f 61af 	mov.w	r1, #1400	@ 0x578
 8001470:	4823      	ldr	r0, [pc, #140]	@ (8001500 <MX_GPIO_Init+0x128>)
 8001472:	f001 f969 	bl	8002748 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2180      	movs	r1, #128	@ 0x80
 800147a:	4822      	ldr	r0, [pc, #136]	@ (8001504 <MX_GPIO_Init+0x12c>)
 800147c:	f001 f964 	bl	8002748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001480:	2320      	movs	r3, #32
 8001482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001484:	2300      	movs	r3, #0
 8001486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001488:	2301      	movs	r3, #1
 800148a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	481a      	ldr	r0, [pc, #104]	@ (80014fc <MX_GPIO_Init+0x124>)
 8001494:	f000 ffbc 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 RGB_G_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|RGB_G_Pin|BUZZER_Pin;
 8001498:	f44f 631c 	mov.w	r3, #2496	@ 0x9c0
 800149c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149e:	2301      	movs	r3, #1
 80014a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	4812      	ldr	r0, [pc, #72]	@ (80014fc <MX_GPIO_Init+0x124>)
 80014b2:	f000 ffad 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGB_R_Pin RGB_B_Pin PB4 PB5
                           PB6 LED_Pin */
  GPIO_InitStruct.Pin = RGB_R_Pin|RGB_B_Pin|GPIO_PIN_4|GPIO_PIN_5
 80014b6:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 80014ba:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014bc:	2301      	movs	r3, #1
 80014be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4619      	mov	r1, r3
 80014ce:	480c      	ldr	r0, [pc, #48]	@ (8001500 <MX_GPIO_Init+0x128>)
 80014d0:	f000 ff9e 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014d4:	2380      	movs	r3, #128	@ 0x80
 80014d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d8:	2301      	movs	r3, #1
 80014da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	4806      	ldr	r0, [pc, #24]	@ (8001504 <MX_GPIO_Init+0x12c>)
 80014ec:	f000 ff90 	bl	8002410 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014f0:	bf00      	nop
 80014f2:	3728      	adds	r7, #40	@ 0x28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020000 	.word	0x40020000
 8001500:	40020400 	.word	0x40020400
 8001504:	40020800 	.word	0x40020800

08001508 <Set_RGB_Color>:

/* USER CODE BEGIN 4 */
void Set_RGB_Color(uint8_t red, uint8_t green, uint8_t blue)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
 8001512:	460b      	mov	r3, r1
 8001514:	71bb      	strb	r3, [r7, #6]
 8001516:	4613      	mov	r3, r2
 8001518:	717b      	strb	r3, [r7, #5]
    // Common Anode: LED'i yakmak için GPIO pinini LOW yap
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, red ? GPIO_PIN_RESET : GPIO_PIN_SET); // RGB_R (PB10)
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	2b00      	cmp	r3, #0
 800151e:	bf0c      	ite	eq
 8001520:	2301      	moveq	r3, #1
 8001522:	2300      	movne	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800152c:	480e      	ldr	r0, [pc, #56]	@ (8001568 <Set_RGB_Color+0x60>)
 800152e:	f001 f90b 	bl	8002748 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, green ? GPIO_PIN_RESET : GPIO_PIN_SET); // RGB_G (PA8)
 8001532:	79bb      	ldrb	r3, [r7, #6]
 8001534:	2b00      	cmp	r3, #0
 8001536:	bf0c      	ite	eq
 8001538:	2301      	moveq	r3, #1
 800153a:	2300      	movne	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	461a      	mov	r2, r3
 8001540:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001544:	4809      	ldr	r0, [pc, #36]	@ (800156c <Set_RGB_Color+0x64>)
 8001546:	f001 f8ff 	bl	8002748 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, blue ? GPIO_PIN_RESET : GPIO_PIN_SET); // RGB_B (PB3)
 800154a:	797b      	ldrb	r3, [r7, #5]
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf0c      	ite	eq
 8001550:	2301      	moveq	r3, #1
 8001552:	2300      	movne	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	2108      	movs	r1, #8
 800155a:	4803      	ldr	r0, [pc, #12]	@ (8001568 <Set_RGB_Color+0x60>)
 800155c:	f001 f8f4 	bl	8002748 <HAL_GPIO_WritePin>
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40020400 	.word	0x40020400
 800156c:	40020000 	.word	0x40020000

08001570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001574:	b672      	cpsid	i
}
 8001576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <Error_Handler+0x8>

0800157c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <HAL_MspInit+0x4c>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158a:	4a0f      	ldr	r2, [pc, #60]	@ (80015c8 <HAL_MspInit+0x4c>)
 800158c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001590:	6453      	str	r3, [r2, #68]	@ 0x44
 8001592:	4b0d      	ldr	r3, [pc, #52]	@ (80015c8 <HAL_MspInit+0x4c>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001596:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <HAL_MspInit+0x4c>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a6:	4a08      	ldr	r2, [pc, #32]	@ (80015c8 <HAL_MspInit+0x4c>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ae:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <HAL_MspInit+0x4c>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800

080015cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	@ 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a17      	ldr	r2, [pc, #92]	@ (8001648 <HAL_ADC_MspInit+0x7c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d127      	bne.n	800163e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b16      	ldr	r3, [pc, #88]	@ (800164c <HAL_ADC_MspInit+0x80>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f6:	4a15      	ldr	r2, [pc, #84]	@ (800164c <HAL_ADC_MspInit+0x80>)
 80015f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015fe:	4b13      	ldr	r3, [pc, #76]	@ (800164c <HAL_ADC_MspInit+0x80>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b0f      	ldr	r3, [pc, #60]	@ (800164c <HAL_ADC_MspInit+0x80>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a0e      	ldr	r2, [pc, #56]	@ (800164c <HAL_ADC_MspInit+0x80>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <HAL_ADC_MspInit+0x80>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = LDR_Pin;
 8001626:	2301      	movs	r3, #1
 8001628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800162a:	2303      	movs	r3, #3
 800162c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	4805      	ldr	r0, [pc, #20]	@ (8001650 <HAL_ADC_MspInit+0x84>)
 800163a:	f000 fee9 	bl	8002410 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800163e:	bf00      	nop
 8001640:	3728      	adds	r7, #40	@ 0x28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40012000 	.word	0x40012000
 800164c:	40023800 	.word	0x40023800
 8001650:	40020000 	.word	0x40020000

08001654 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001664:	d115      	bne.n	8001692 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <HAL_TIM_Base_MspInit+0x48>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	4a0b      	ldr	r2, [pc, #44]	@ (800169c <HAL_TIM_Base_MspInit+0x48>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6413      	str	r3, [r2, #64]	@ 0x40
 8001676:	4b09      	ldr	r3, [pc, #36]	@ (800169c <HAL_TIM_Base_MspInit+0x48>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	201c      	movs	r0, #28
 8001688:	f000 fe8b 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800168c:	201c      	movs	r0, #28
 800168e:	f000 fea4 	bl	80023da <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800

080016a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016c0:	d11d      	bne.n	80016fe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <HAL_TIM_MspPostInit+0x68>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001708 <HAL_TIM_MspPostInit+0x68>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001708 <HAL_TIM_MspPostInit+0x68>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016de:	2302      	movs	r3, #2
 80016e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016ee:	2301      	movs	r3, #1
 80016f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	4619      	mov	r1, r3
 80016f8:	4804      	ldr	r0, [pc, #16]	@ (800170c <HAL_TIM_MspPostInit+0x6c>)
 80016fa:	f000 fe89 	bl	8002410 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80016fe:	bf00      	nop
 8001700:	3720      	adds	r7, #32
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800
 800170c:	40020000 	.word	0x40020000

08001710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <NMI_Handler+0x4>

08001718 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <MemManage_Handler+0x4>

08001728 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <UsageFault_Handler+0x4>

08001738 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001766:	f000 f93f 	bl	80019e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001774:	4802      	ldr	r0, [pc, #8]	@ (8001780 <TIM2_IRQHandler+0x10>)
 8001776:	f001 fdbd 	bl	80032f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200000d0 	.word	0x200000d0

08001784 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	e00a      	b.n	80017ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001796:	f3af 8000 	nop.w
 800179a:	4601      	mov	r1, r0
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	60ba      	str	r2, [r7, #8]
 80017a2:	b2ca      	uxtb	r2, r1
 80017a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3301      	adds	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	dbf0      	blt.n	8001796 <_read+0x12>
  }

  return len;
 80017b4:	687b      	ldr	r3, [r7, #4]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e009      	b.n	80017e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	60ba      	str	r2, [r7, #8]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	dbf1      	blt.n	80017d0 <_write+0x12>
  }
  return len;
 80017ec:	687b      	ldr	r3, [r7, #4]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <_close>:

int _close(int file)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800181e:	605a      	str	r2, [r3, #4]
  return 0;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <_isatty>:

int _isatty(int file)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001868:	4a14      	ldr	r2, [pc, #80]	@ (80018bc <_sbrk+0x5c>)
 800186a:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <_sbrk+0x60>)
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001874:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <_sbrk+0x64>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800187c:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <_sbrk+0x64>)
 800187e:	4a12      	ldr	r2, [pc, #72]	@ (80018c8 <_sbrk+0x68>)
 8001880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001882:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	429a      	cmp	r2, r3
 800188e:	d207      	bcs.n	80018a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001890:	f002 fcd0 	bl	8004234 <__errno>
 8001894:	4603      	mov	r3, r0
 8001896:	220c      	movs	r2, #12
 8001898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
 800189e:	e009      	b.n	80018b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a0:	4b08      	ldr	r3, [pc, #32]	@ (80018c4 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a6:	4b07      	ldr	r3, [pc, #28]	@ (80018c4 <_sbrk+0x64>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	4a05      	ldr	r2, [pc, #20]	@ (80018c4 <_sbrk+0x64>)
 80018b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b2:	68fb      	ldr	r3, [r7, #12]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20020000 	.word	0x20020000
 80018c0:	00000400 	.word	0x00000400
 80018c4:	20000124 	.word	0x20000124
 80018c8:	20000278 	.word	0x20000278

080018cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d0:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <SystemInit+0x20>)
 80018d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018d6:	4a05      	ldr	r2, [pc, #20]	@ (80018ec <SystemInit+0x20>)
 80018d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001928 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018f4:	f7ff ffea 	bl	80018cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018f8:	480c      	ldr	r0, [pc, #48]	@ (800192c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018fa:	490d      	ldr	r1, [pc, #52]	@ (8001930 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001934 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001900:	e002      	b.n	8001908 <LoopCopyDataInit>

08001902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001906:	3304      	adds	r3, #4

08001908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800190c:	d3f9      	bcc.n	8001902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190e:	4a0a      	ldr	r2, [pc, #40]	@ (8001938 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001910:	4c0a      	ldr	r4, [pc, #40]	@ (800193c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001914:	e001      	b.n	800191a <LoopFillZerobss>

08001916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001918:	3204      	adds	r2, #4

0800191a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800191c:	d3fb      	bcc.n	8001916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800191e:	f002 fc8f 	bl	8004240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001922:	f7ff faa9 	bl	8000e78 <main>
  bx  lr    
 8001926:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001928:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800192c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001930:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001934:	08005248 	.word	0x08005248
  ldr r2, =_sbss
 8001938:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800193c:	20000278 	.word	0x20000278

08001940 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001940:	e7fe      	b.n	8001940 <ADC_IRQHandler>
	...

08001944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001948:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <HAL_Init+0x40>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0d      	ldr	r2, [pc, #52]	@ (8001984 <HAL_Init+0x40>)
 800194e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001952:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001954:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <HAL_Init+0x40>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0a      	ldr	r2, [pc, #40]	@ (8001984 <HAL_Init+0x40>)
 800195a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800195e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001960:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <HAL_Init+0x40>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a07      	ldr	r2, [pc, #28]	@ (8001984 <HAL_Init+0x40>)
 8001966:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800196a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196c:	2003      	movs	r0, #3
 800196e:	f000 fd0d 	bl	800238c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001972:	200f      	movs	r0, #15
 8001974:	f000 f808 	bl	8001988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001978:	f7ff fe00 	bl	800157c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40023c00 	.word	0x40023c00

08001988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001990:	4b12      	ldr	r3, [pc, #72]	@ (80019dc <HAL_InitTick+0x54>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <HAL_InitTick+0x58>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800199e:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 fd25 	bl	80023f6 <HAL_SYSTICK_Config>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e00e      	b.n	80019d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	d80a      	bhi.n	80019d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019bc:	2200      	movs	r2, #0
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295
 80019c4:	f000 fced 	bl	80023a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c8:	4a06      	ldr	r2, [pc, #24]	@ (80019e4 <HAL_InitTick+0x5c>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e000      	b.n	80019d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000004 	.word	0x20000004
 80019e0:	2000000c 	.word	0x2000000c
 80019e4:	20000008 	.word	0x20000008

080019e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019ec:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <HAL_IncTick+0x20>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <HAL_IncTick+0x24>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	4a04      	ldr	r2, [pc, #16]	@ (8001a0c <HAL_IncTick+0x24>)
 80019fa:	6013      	str	r3, [r2, #0]
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	2000000c 	.word	0x2000000c
 8001a0c:	20000128 	.word	0x20000128

08001a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return uwTick;
 8001a14:	4b03      	ldr	r3, [pc, #12]	@ (8001a24 <HAL_GetTick+0x14>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000128 	.word	0x20000128

08001a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a30:	f7ff ffee 	bl	8001a10 <HAL_GetTick>
 8001a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a40:	d005      	beq.n	8001a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a42:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <HAL_Delay+0x44>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a4e:	bf00      	nop
 8001a50:	f7ff ffde 	bl	8001a10 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d8f7      	bhi.n	8001a50 <HAL_Delay+0x28>
  {
  }
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	2000000c 	.word	0x2000000c

08001a70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e033      	b.n	8001aee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d109      	bne.n	8001aa2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff fd9c 	bl	80015cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	f003 0310 	and.w	r3, r3, #16
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d118      	bne.n	8001ae0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ab6:	f023 0302 	bic.w	r3, r3, #2
 8001aba:	f043 0202 	orr.w	r2, r3, #2
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 fa96 	bl	8001ff4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	f023 0303 	bic.w	r3, r3, #3
 8001ad6:	f043 0201 	orr.w	r2, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ade:	e001      	b.n	8001ae4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d101      	bne.n	8001b12 <HAL_ADC_Start+0x1a>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e097      	b.n	8001c42 <HAL_ADC_Start+0x14a>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d018      	beq.n	8001b5a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b38:	4b45      	ldr	r3, [pc, #276]	@ (8001c50 <HAL_ADC_Start+0x158>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a45      	ldr	r2, [pc, #276]	@ (8001c54 <HAL_ADC_Start+0x15c>)
 8001b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b42:	0c9a      	lsrs	r2, r3, #18
 8001b44:	4613      	mov	r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4413      	add	r3, r2
 8001b4a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b4c:	e002      	b.n	8001b54 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f9      	bne.n	8001b4e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d15f      	bne.n	8001c28 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b70:	f023 0301 	bic.w	r3, r3, #1
 8001b74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d007      	beq.n	8001b9a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b92:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ba6:	d106      	bne.n	8001bb6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bac:	f023 0206 	bic.w	r2, r3, #6
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	645a      	str	r2, [r3, #68]	@ 0x44
 8001bb4:	e002      	b.n	8001bbc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bc4:	4b24      	ldr	r3, [pc, #144]	@ (8001c58 <HAL_ADC_Start+0x160>)
 8001bc6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001bd0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10f      	bne.n	8001bfe <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d129      	bne.n	8001c40 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	e020      	b.n	8001c40 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a16      	ldr	r2, [pc, #88]	@ (8001c5c <HAL_ADC_Start+0x164>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d11b      	bne.n	8001c40 <HAL_ADC_Start+0x148>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d114      	bne.n	8001c40 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	e00b      	b.n	8001c40 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	f043 0210 	orr.w	r2, r3, #16
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c38:	f043 0201 	orr.w	r2, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000004 	.word	0x20000004
 8001c54:	431bde83 	.word	0x431bde83
 8001c58:	40012300 	.word	0x40012300
 8001c5c:	40012000 	.word	0x40012000

08001c60 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c7c:	d113      	bne.n	8001ca6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c8c:	d10b      	bne.n	8001ca6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	f043 0220 	orr.w	r2, r3, #32
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e063      	b.n	8001d6e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ca6:	f7ff feb3 	bl	8001a10 <HAL_GetTick>
 8001caa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cac:	e021      	b.n	8001cf2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d01d      	beq.n	8001cf2 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d007      	beq.n	8001ccc <HAL_ADC_PollForConversion+0x6c>
 8001cbc:	f7ff fea8 	bl	8001a10 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d212      	bcs.n	8001cf2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d00b      	beq.n	8001cf2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	f043 0204 	orr.w	r2, r3, #4
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e03d      	b.n	8001d6e <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d1d6      	bne.n	8001cae <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0212 	mvn.w	r2, #18
 8001d08:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d123      	bne.n	8001d6c <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d11f      	bne.n	8001d6c <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d32:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d006      	beq.n	8001d48 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d111      	bne.n	8001d6c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d105      	bne.n	8001d6c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d64:	f043 0201 	orr.w	r2, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x1c>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e113      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x244>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b09      	cmp	r3, #9
 8001dba:	d925      	bls.n	8001e08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68d9      	ldr	r1, [r3, #12]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	3b1e      	subs	r3, #30
 8001dd2:	2207      	movs	r2, #7
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43da      	mvns	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	400a      	ands	r2, r1
 8001de0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68d9      	ldr	r1, [r3, #12]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	4603      	mov	r3, r0
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4403      	add	r3, r0
 8001dfa:	3b1e      	subs	r3, #30
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	e022      	b.n	8001e4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6919      	ldr	r1, [r3, #16]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	4613      	mov	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	4413      	add	r3, r2
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43da      	mvns	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	400a      	ands	r2, r1
 8001e2a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6919      	ldr	r1, [r3, #16]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	4603      	mov	r3, r0
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4403      	add	r3, r0
 8001e44:	409a      	lsls	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b06      	cmp	r3, #6
 8001e54:	d824      	bhi.n	8001ea0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	3b05      	subs	r3, #5
 8001e68:	221f      	movs	r2, #31
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	400a      	ands	r2, r1
 8001e76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	4618      	mov	r0, r3
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	3b05      	subs	r3, #5
 8001e92:	fa00 f203 	lsl.w	r2, r0, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e9e:	e04c      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b0c      	cmp	r3, #12
 8001ea6:	d824      	bhi.n	8001ef2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3b23      	subs	r3, #35	@ 0x23
 8001eba:	221f      	movs	r2, #31
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43da      	mvns	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	400a      	ands	r2, r1
 8001ec8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3b23      	subs	r3, #35	@ 0x23
 8001ee4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ef0:	e023      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	3b41      	subs	r3, #65	@ 0x41
 8001f04:	221f      	movs	r2, #31
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	400a      	ands	r2, r1
 8001f12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	4618      	mov	r0, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3b41      	subs	r3, #65	@ 0x41
 8001f2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f3a:	4b29      	ldr	r3, [pc, #164]	@ (8001fe0 <HAL_ADC_ConfigChannel+0x250>)
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a28      	ldr	r2, [pc, #160]	@ (8001fe4 <HAL_ADC_ConfigChannel+0x254>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d10f      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x1d8>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b12      	cmp	r3, #18
 8001f4e:	d10b      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe4 <HAL_ADC_ConfigChannel+0x254>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d12b      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x23a>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe8 <HAL_ADC_ConfigChannel+0x258>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d003      	beq.n	8001f84 <HAL_ADC_ConfigChannel+0x1f4>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b11      	cmp	r3, #17
 8001f82:	d122      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a11      	ldr	r2, [pc, #68]	@ (8001fe8 <HAL_ADC_ConfigChannel+0x258>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d111      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fa6:	4b11      	ldr	r3, [pc, #68]	@ (8001fec <HAL_ADC_ConfigChannel+0x25c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a11      	ldr	r2, [pc, #68]	@ (8001ff0 <HAL_ADC_ConfigChannel+0x260>)
 8001fac:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb0:	0c9a      	lsrs	r2, r3, #18
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001fbc:	e002      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f9      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	40012300 	.word	0x40012300
 8001fe4:	40012000 	.word	0x40012000
 8001fe8:	10000012 	.word	0x10000012
 8001fec:	20000004 	.word	0x20000004
 8001ff0:	431bde83 	.word	0x431bde83

08001ff4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ffc:	4b79      	ldr	r3, [pc, #484]	@ (80021e4 <ADC_Init+0x1f0>)
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	431a      	orrs	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002028:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6859      	ldr	r1, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	021a      	lsls	r2, r3, #8
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800204c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6859      	ldr	r1, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800206e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6899      	ldr	r1, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002086:	4a58      	ldr	r2, [pc, #352]	@ (80021e8 <ADC_Init+0x1f4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d022      	beq.n	80020d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800209a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6899      	ldr	r1, [r3, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6899      	ldr	r1, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	e00f      	b.n	80020f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020f0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0202 	bic.w	r2, r2, #2
 8002100:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6899      	ldr	r1, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	7e1b      	ldrb	r3, [r3, #24]
 800210c:	005a      	lsls	r2, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 3020 	ldrb.w	r3, [r3, #32]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d01b      	beq.n	8002158 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800212e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800213e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6859      	ldr	r1, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214a:	3b01      	subs	r3, #1
 800214c:	035a      	lsls	r2, r3, #13
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	e007      	b.n	8002168 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002166:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002176:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	3b01      	subs	r3, #1
 8002184:	051a      	lsls	r2, r3, #20
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800219c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6899      	ldr	r1, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021aa:	025a      	lsls	r2, r3, #9
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6899      	ldr	r1, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	029a      	lsls	r2, r3, #10
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	609a      	str	r2, [r3, #8]
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	40012300 	.word	0x40012300
 80021e8:	0f000001 	.word	0x0f000001

080021ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002230 <__NVIC_SetPriorityGrouping+0x44>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002208:	4013      	ands	r3, r2
 800220a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002214:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800221c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800221e:	4a04      	ldr	r2, [pc, #16]	@ (8002230 <__NVIC_SetPriorityGrouping+0x44>)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	60d3      	str	r3, [r2, #12]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002238:	4b04      	ldr	r3, [pc, #16]	@ (800224c <__NVIC_GetPriorityGrouping+0x18>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	0a1b      	lsrs	r3, r3, #8
 800223e:	f003 0307 	and.w	r3, r3, #7
}
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	2b00      	cmp	r3, #0
 8002260:	db0b      	blt.n	800227a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	f003 021f 	and.w	r2, r3, #31
 8002268:	4907      	ldr	r1, [pc, #28]	@ (8002288 <__NVIC_EnableIRQ+0x38>)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	2001      	movs	r0, #1
 8002272:	fa00 f202 	lsl.w	r2, r0, r2
 8002276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	e000e100 	.word	0xe000e100

0800228c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	6039      	str	r1, [r7, #0]
 8002296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229c:	2b00      	cmp	r3, #0
 800229e:	db0a      	blt.n	80022b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	490c      	ldr	r1, [pc, #48]	@ (80022d8 <__NVIC_SetPriority+0x4c>)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	0112      	lsls	r2, r2, #4
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	440b      	add	r3, r1
 80022b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b4:	e00a      	b.n	80022cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	4908      	ldr	r1, [pc, #32]	@ (80022dc <__NVIC_SetPriority+0x50>)
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	3b04      	subs	r3, #4
 80022c4:	0112      	lsls	r2, r2, #4
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	440b      	add	r3, r1
 80022ca:	761a      	strb	r2, [r3, #24]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000e100 	.word	0xe000e100
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b089      	sub	sp, #36	@ 0x24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f1c3 0307 	rsb	r3, r3, #7
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	bf28      	it	cs
 80022fe:	2304      	movcs	r3, #4
 8002300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3304      	adds	r3, #4
 8002306:	2b06      	cmp	r3, #6
 8002308:	d902      	bls.n	8002310 <NVIC_EncodePriority+0x30>
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3b03      	subs	r3, #3
 800230e:	e000      	b.n	8002312 <NVIC_EncodePriority+0x32>
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002314:	f04f 32ff 	mov.w	r2, #4294967295
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43da      	mvns	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	401a      	ands	r2, r3
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002328:	f04f 31ff 	mov.w	r1, #4294967295
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	fa01 f303 	lsl.w	r3, r1, r3
 8002332:	43d9      	mvns	r1, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002338:	4313      	orrs	r3, r2
         );
}
 800233a:	4618      	mov	r0, r3
 800233c:	3724      	adds	r7, #36	@ 0x24
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3b01      	subs	r3, #1
 8002354:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002358:	d301      	bcc.n	800235e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235a:	2301      	movs	r3, #1
 800235c:	e00f      	b.n	800237e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800235e:	4a0a      	ldr	r2, [pc, #40]	@ (8002388 <SysTick_Config+0x40>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002366:	210f      	movs	r1, #15
 8002368:	f04f 30ff 	mov.w	r0, #4294967295
 800236c:	f7ff ff8e 	bl	800228c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002370:	4b05      	ldr	r3, [pc, #20]	@ (8002388 <SysTick_Config+0x40>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002376:	4b04      	ldr	r3, [pc, #16]	@ (8002388 <SysTick_Config+0x40>)
 8002378:	2207      	movs	r2, #7
 800237a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	e000e010 	.word	0xe000e010

0800238c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff29 	bl	80021ec <__NVIC_SetPriorityGrouping>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b086      	sub	sp, #24
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023b4:	f7ff ff3e 	bl	8002234 <__NVIC_GetPriorityGrouping>
 80023b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	6978      	ldr	r0, [r7, #20]
 80023c0:	f7ff ff8e 	bl	80022e0 <NVIC_EncodePriority>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff5d 	bl	800228c <__NVIC_SetPriority>
}
 80023d2:	bf00      	nop
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff31 	bl	8002250 <__NVIC_EnableIRQ>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ffa2 	bl	8002348 <SysTick_Config>
 8002404:	4603      	mov	r3, r0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	@ 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	e159      	b.n	80026e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800242c:	2201      	movs	r2, #1
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	429a      	cmp	r2, r3
 8002446:	f040 8148 	bne.w	80026da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b01      	cmp	r3, #1
 8002454:	d005      	beq.n	8002462 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800245e:	2b02      	cmp	r3, #2
 8002460:	d130      	bne.n	80024c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	2203      	movs	r2, #3
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002498:	2201      	movs	r2, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	f003 0201 	and.w	r2, r3, #1
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d017      	beq.n	8002500 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	2203      	movs	r2, #3
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d123      	bne.n	8002554 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	08da      	lsrs	r2, r3, #3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3208      	adds	r2, #8
 8002514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	220f      	movs	r2, #15
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	08da      	lsrs	r2, r3, #3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3208      	adds	r2, #8
 800254e:	69b9      	ldr	r1, [r7, #24]
 8002550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	2203      	movs	r2, #3
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0203 	and.w	r2, r3, #3
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80a2 	beq.w	80026da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b57      	ldr	r3, [pc, #348]	@ (80026f8 <HAL_GPIO_Init+0x2e8>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259e:	4a56      	ldr	r2, [pc, #344]	@ (80026f8 <HAL_GPIO_Init+0x2e8>)
 80025a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025a6:	4b54      	ldr	r3, [pc, #336]	@ (80026f8 <HAL_GPIO_Init+0x2e8>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025b2:	4a52      	ldr	r2, [pc, #328]	@ (80026fc <HAL_GPIO_Init+0x2ec>)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	089b      	lsrs	r3, r3, #2
 80025b8:	3302      	adds	r3, #2
 80025ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	220f      	movs	r2, #15
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a49      	ldr	r2, [pc, #292]	@ (8002700 <HAL_GPIO_Init+0x2f0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d019      	beq.n	8002612 <HAL_GPIO_Init+0x202>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a48      	ldr	r2, [pc, #288]	@ (8002704 <HAL_GPIO_Init+0x2f4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d013      	beq.n	800260e <HAL_GPIO_Init+0x1fe>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a47      	ldr	r2, [pc, #284]	@ (8002708 <HAL_GPIO_Init+0x2f8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00d      	beq.n	800260a <HAL_GPIO_Init+0x1fa>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a46      	ldr	r2, [pc, #280]	@ (800270c <HAL_GPIO_Init+0x2fc>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d007      	beq.n	8002606 <HAL_GPIO_Init+0x1f6>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a45      	ldr	r2, [pc, #276]	@ (8002710 <HAL_GPIO_Init+0x300>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d101      	bne.n	8002602 <HAL_GPIO_Init+0x1f2>
 80025fe:	2304      	movs	r3, #4
 8002600:	e008      	b.n	8002614 <HAL_GPIO_Init+0x204>
 8002602:	2307      	movs	r3, #7
 8002604:	e006      	b.n	8002614 <HAL_GPIO_Init+0x204>
 8002606:	2303      	movs	r3, #3
 8002608:	e004      	b.n	8002614 <HAL_GPIO_Init+0x204>
 800260a:	2302      	movs	r3, #2
 800260c:	e002      	b.n	8002614 <HAL_GPIO_Init+0x204>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_GPIO_Init+0x204>
 8002612:	2300      	movs	r3, #0
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	f002 0203 	and.w	r2, r2, #3
 800261a:	0092      	lsls	r2, r2, #2
 800261c:	4093      	lsls	r3, r2
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002624:	4935      	ldr	r1, [pc, #212]	@ (80026fc <HAL_GPIO_Init+0x2ec>)
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	3302      	adds	r3, #2
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002632:	4b38      	ldr	r3, [pc, #224]	@ (8002714 <HAL_GPIO_Init+0x304>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002656:	4a2f      	ldr	r2, [pc, #188]	@ (8002714 <HAL_GPIO_Init+0x304>)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800265c:	4b2d      	ldr	r3, [pc, #180]	@ (8002714 <HAL_GPIO_Init+0x304>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002680:	4a24      	ldr	r2, [pc, #144]	@ (8002714 <HAL_GPIO_Init+0x304>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002686:	4b23      	ldr	r3, [pc, #140]	@ (8002714 <HAL_GPIO_Init+0x304>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002714 <HAL_GPIO_Init+0x304>)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b0:	4b18      	ldr	r3, [pc, #96]	@ (8002714 <HAL_GPIO_Init+0x304>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026d4:	4a0f      	ldr	r2, [pc, #60]	@ (8002714 <HAL_GPIO_Init+0x304>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3301      	adds	r3, #1
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	2b0f      	cmp	r3, #15
 80026e4:	f67f aea2 	bls.w	800242c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3724      	adds	r7, #36	@ 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40013800 	.word	0x40013800
 8002700:	40020000 	.word	0x40020000
 8002704:	40020400 	.word	0x40020400
 8002708:	40020800 	.word	0x40020800
 800270c:	40020c00 	.word	0x40020c00
 8002710:	40021000 	.word	0x40021000
 8002714:	40013c00 	.word	0x40013c00

08002718 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	887b      	ldrh	r3, [r7, #2]
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
 8002734:	e001      	b.n	800273a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800273a:	7bfb      	ldrb	r3, [r7, #15]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
 8002754:	4613      	mov	r3, r2
 8002756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002758:	787b      	ldrb	r3, [r7, #1]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800275e:	887a      	ldrh	r2, [r7, #2]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002764:	e003      	b.n	800276e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002766:	887b      	ldrh	r3, [r7, #2]
 8002768:	041a      	lsls	r2, r3, #16
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	619a      	str	r2, [r3, #24]
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e267      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d075      	beq.n	8002886 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800279a:	4b88      	ldr	r3, [pc, #544]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d00c      	beq.n	80027c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027a6:	4b85      	ldr	r3, [pc, #532]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d112      	bne.n	80027d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027b2:	4b82      	ldr	r3, [pc, #520]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027be:	d10b      	bne.n	80027d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c0:	4b7e      	ldr	r3, [pc, #504]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d05b      	beq.n	8002884 <HAL_RCC_OscConfig+0x108>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d157      	bne.n	8002884 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e242      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027e0:	d106      	bne.n	80027f0 <HAL_RCC_OscConfig+0x74>
 80027e2:	4b76      	ldr	r3, [pc, #472]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a75      	ldr	r2, [pc, #468]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 80027e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	e01d      	b.n	800282c <HAL_RCC_OscConfig+0xb0>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027f8:	d10c      	bne.n	8002814 <HAL_RCC_OscConfig+0x98>
 80027fa:	4b70      	ldr	r3, [pc, #448]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a6f      	ldr	r2, [pc, #444]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 8002800:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	4b6d      	ldr	r3, [pc, #436]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a6c      	ldr	r2, [pc, #432]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 800280c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	e00b      	b.n	800282c <HAL_RCC_OscConfig+0xb0>
 8002814:	4b69      	ldr	r3, [pc, #420]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a68      	ldr	r2, [pc, #416]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 800281a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	4b66      	ldr	r3, [pc, #408]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a65      	ldr	r2, [pc, #404]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 8002826:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800282a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d013      	beq.n	800285c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002834:	f7ff f8ec 	bl	8001a10 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800283c:	f7ff f8e8 	bl	8001a10 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b64      	cmp	r3, #100	@ 0x64
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e207      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284e:	4b5b      	ldr	r3, [pc, #364]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0xc0>
 800285a:	e014      	b.n	8002886 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285c:	f7ff f8d8 	bl	8001a10 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002864:	f7ff f8d4 	bl	8001a10 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b64      	cmp	r3, #100	@ 0x64
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e1f3      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002876:	4b51      	ldr	r3, [pc, #324]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0xe8>
 8002882:	e000      	b.n	8002886 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d063      	beq.n	800295a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002892:	4b4a      	ldr	r3, [pc, #296]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00b      	beq.n	80028b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800289e:	4b47      	ldr	r3, [pc, #284]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d11c      	bne.n	80028e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028aa:	4b44      	ldr	r3, [pc, #272]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d116      	bne.n	80028e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b6:	4b41      	ldr	r3, [pc, #260]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d005      	beq.n	80028ce <HAL_RCC_OscConfig+0x152>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d001      	beq.n	80028ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e1c7      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ce:	4b3b      	ldr	r3, [pc, #236]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4937      	ldr	r1, [pc, #220]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e2:	e03a      	b.n	800295a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d020      	beq.n	800292e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ec:	4b34      	ldr	r3, [pc, #208]	@ (80029c0 <HAL_RCC_OscConfig+0x244>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f2:	f7ff f88d 	bl	8001a10 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028fa:	f7ff f889 	bl	8001a10 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e1a8      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290c:	4b2b      	ldr	r3, [pc, #172]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0f0      	beq.n	80028fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002918:	4b28      	ldr	r3, [pc, #160]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4925      	ldr	r1, [pc, #148]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 8002928:	4313      	orrs	r3, r2
 800292a:	600b      	str	r3, [r1, #0]
 800292c:	e015      	b.n	800295a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800292e:	4b24      	ldr	r3, [pc, #144]	@ (80029c0 <HAL_RCC_OscConfig+0x244>)
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7ff f86c 	bl	8001a10 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800293c:	f7ff f868 	bl	8001a10 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e187      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294e:	4b1b      	ldr	r3, [pc, #108]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	d036      	beq.n	80029d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d016      	beq.n	800299c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800296e:	4b15      	ldr	r3, [pc, #84]	@ (80029c4 <HAL_RCC_OscConfig+0x248>)
 8002970:	2201      	movs	r2, #1
 8002972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002974:	f7ff f84c 	bl	8001a10 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800297c:	f7ff f848 	bl	8001a10 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e167      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298e:	4b0b      	ldr	r3, [pc, #44]	@ (80029bc <HAL_RCC_OscConfig+0x240>)
 8002990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x200>
 800299a:	e01b      	b.n	80029d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800299c:	4b09      	ldr	r3, [pc, #36]	@ (80029c4 <HAL_RCC_OscConfig+0x248>)
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a2:	f7ff f835 	bl	8001a10 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a8:	e00e      	b.n	80029c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029aa:	f7ff f831 	bl	8001a10 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d907      	bls.n	80029c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e150      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
 80029bc:	40023800 	.word	0x40023800
 80029c0:	42470000 	.word	0x42470000
 80029c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c8:	4b88      	ldr	r3, [pc, #544]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 80029ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1ea      	bne.n	80029aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 8097 	beq.w	8002b10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e2:	2300      	movs	r3, #0
 80029e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e6:	4b81      	ldr	r3, [pc, #516]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10f      	bne.n	8002a12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	4b7d      	ldr	r3, [pc, #500]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	4a7c      	ldr	r2, [pc, #496]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 80029fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a02:	4b7a      	ldr	r3, [pc, #488]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a12:	4b77      	ldr	r3, [pc, #476]	@ (8002bf0 <HAL_RCC_OscConfig+0x474>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d118      	bne.n	8002a50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a1e:	4b74      	ldr	r3, [pc, #464]	@ (8002bf0 <HAL_RCC_OscConfig+0x474>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a73      	ldr	r2, [pc, #460]	@ (8002bf0 <HAL_RCC_OscConfig+0x474>)
 8002a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2a:	f7fe fff1 	bl	8001a10 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a32:	f7fe ffed 	bl	8001a10 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e10c      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a44:	4b6a      	ldr	r3, [pc, #424]	@ (8002bf0 <HAL_RCC_OscConfig+0x474>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f0      	beq.n	8002a32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d106      	bne.n	8002a66 <HAL_RCC_OscConfig+0x2ea>
 8002a58:	4b64      	ldr	r3, [pc, #400]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5c:	4a63      	ldr	r2, [pc, #396]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a64:	e01c      	b.n	8002aa0 <HAL_RCC_OscConfig+0x324>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b05      	cmp	r3, #5
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCC_OscConfig+0x30c>
 8002a6e:	4b5f      	ldr	r3, [pc, #380]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a72:	4a5e      	ldr	r2, [pc, #376]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a74:	f043 0304 	orr.w	r3, r3, #4
 8002a78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a7a:	4b5c      	ldr	r3, [pc, #368]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7e:	4a5b      	ldr	r2, [pc, #364]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a86:	e00b      	b.n	8002aa0 <HAL_RCC_OscConfig+0x324>
 8002a88:	4b58      	ldr	r3, [pc, #352]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8c:	4a57      	ldr	r2, [pc, #348]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a8e:	f023 0301 	bic.w	r3, r3, #1
 8002a92:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a94:	4b55      	ldr	r3, [pc, #340]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a98:	4a54      	ldr	r2, [pc, #336]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a9a:	f023 0304 	bic.w	r3, r3, #4
 8002a9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d015      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa8:	f7fe ffb2 	bl	8001a10 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aae:	e00a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab0:	f7fe ffae 	bl	8001a10 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e0cb      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac6:	4b49      	ldr	r3, [pc, #292]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0ee      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x334>
 8002ad2:	e014      	b.n	8002afe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad4:	f7fe ff9c 	bl	8001a10 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ada:	e00a      	b.n	8002af2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002adc:	f7fe ff98 	bl	8001a10 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e0b5      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af2:	4b3e      	ldr	r3, [pc, #248]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1ee      	bne.n	8002adc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002afe:	7dfb      	ldrb	r3, [r7, #23]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d105      	bne.n	8002b10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b04:	4b39      	ldr	r3, [pc, #228]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	4a38      	ldr	r2, [pc, #224]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 8002b0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80a1 	beq.w	8002c5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b1a:	4b34      	ldr	r3, [pc, #208]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d05c      	beq.n	8002be0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d141      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2e:	4b31      	ldr	r3, [pc, #196]	@ (8002bf4 <HAL_RCC_OscConfig+0x478>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7fe ff6c 	bl	8001a10 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b3c:	f7fe ff68 	bl	8001a10 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e087      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4e:	4b27      	ldr	r3, [pc, #156]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69da      	ldr	r2, [r3, #28]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b68:	019b      	lsls	r3, r3, #6
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b70:	085b      	lsrs	r3, r3, #1
 8002b72:	3b01      	subs	r3, #1
 8002b74:	041b      	lsls	r3, r3, #16
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7c:	061b      	lsls	r3, r3, #24
 8002b7e:	491b      	ldr	r1, [pc, #108]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b84:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf4 <HAL_RCC_OscConfig+0x478>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8a:	f7fe ff41 	bl	8001a10 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b92:	f7fe ff3d 	bl	8001a10 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e05c      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba4:	4b11      	ldr	r3, [pc, #68]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x416>
 8002bb0:	e054      	b.n	8002c5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb2:	4b10      	ldr	r3, [pc, #64]	@ (8002bf4 <HAL_RCC_OscConfig+0x478>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe ff2a 	bl	8001a10 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc0:	f7fe ff26 	bl	8001a10 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e045      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd2:	4b06      	ldr	r3, [pc, #24]	@ (8002bec <HAL_RCC_OscConfig+0x470>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x444>
 8002bde:	e03d      	b.n	8002c5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d107      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e038      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40007000 	.word	0x40007000
 8002bf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c68 <HAL_RCC_OscConfig+0x4ec>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d028      	beq.n	8002c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d121      	bne.n	8002c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d11a      	bne.n	8002c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c28:	4013      	ands	r3, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d111      	bne.n	8002c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3e:	085b      	lsrs	r3, r3, #1
 8002c40:	3b01      	subs	r3, #1
 8002c42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d107      	bne.n	8002c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800

08002c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0cc      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c80:	4b68      	ldr	r3, [pc, #416]	@ (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d90c      	bls.n	8002ca8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b65      	ldr	r3, [pc, #404]	@ (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b63      	ldr	r3, [pc, #396]	@ (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0b8      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d020      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc0:	4b59      	ldr	r3, [pc, #356]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4a58      	ldr	r2, [pc, #352]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cd8:	4b53      	ldr	r3, [pc, #332]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4a52      	ldr	r2, [pc, #328]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ce2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce4:	4b50      	ldr	r3, [pc, #320]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	494d      	ldr	r1, [pc, #308]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d044      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0a:	4b47      	ldr	r3, [pc, #284]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d119      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e07f      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d003      	beq.n	8002d2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d26:	2b03      	cmp	r3, #3
 8002d28:	d107      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d109      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e06f      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e067      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d4a:	4b37      	ldr	r3, [pc, #220]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f023 0203 	bic.w	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	4934      	ldr	r1, [pc, #208]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d5c:	f7fe fe58 	bl	8001a10 <HAL_GetTick>
 8002d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d64:	f7fe fe54 	bl	8001a10 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e04f      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 020c 	and.w	r2, r3, #12
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d1eb      	bne.n	8002d64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d8c:	4b25      	ldr	r3, [pc, #148]	@ (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d20c      	bcs.n	8002db4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9a:	4b22      	ldr	r3, [pc, #136]	@ (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da2:	4b20      	ldr	r3, [pc, #128]	@ (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e032      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc0:	4b19      	ldr	r3, [pc, #100]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	4916      	ldr	r1, [pc, #88]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d009      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dde:	4b12      	ldr	r3, [pc, #72]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	490e      	ldr	r1, [pc, #56]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002df2:	f000 f821 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 8002df6:	4602      	mov	r2, r0
 8002df8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	490a      	ldr	r1, [pc, #40]	@ (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002e04:	5ccb      	ldrb	r3, [r1, r3]
 8002e06:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0a:	4a09      	ldr	r2, [pc, #36]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e0e:	4b09      	ldr	r3, [pc, #36]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe fdb8 	bl	8001988 <HAL_InitTick>

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40023c00 	.word	0x40023c00
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	080051f4 	.word	0x080051f4
 8002e30:	20000004 	.word	0x20000004
 8002e34:	20000008 	.word	0x20000008

08002e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e3c:	b094      	sub	sp, #80	@ 0x50
 8002e3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e50:	4b79      	ldr	r3, [pc, #484]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 030c 	and.w	r3, r3, #12
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d00d      	beq.n	8002e78 <HAL_RCC_GetSysClockFreq+0x40>
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	f200 80e1 	bhi.w	8003024 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0x34>
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d003      	beq.n	8002e72 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e6a:	e0db      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e6c:	4b73      	ldr	r3, [pc, #460]	@ (800303c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e70:	e0db      	b.n	800302a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e72:	4b73      	ldr	r3, [pc, #460]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e76:	e0d8      	b.n	800302a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e78:	4b6f      	ldr	r3, [pc, #444]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e80:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e82:	4b6d      	ldr	r3, [pc, #436]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d063      	beq.n	8002f56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8e:	4b6a      	ldr	r3, [pc, #424]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	099b      	lsrs	r3, r3, #6
 8002e94:	2200      	movs	r2, #0
 8002e96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ea6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002eaa:	4622      	mov	r2, r4
 8002eac:	462b      	mov	r3, r5
 8002eae:	f04f 0000 	mov.w	r0, #0
 8002eb2:	f04f 0100 	mov.w	r1, #0
 8002eb6:	0159      	lsls	r1, r3, #5
 8002eb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ebc:	0150      	lsls	r0, r2, #5
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	1a51      	subs	r1, r2, r1
 8002ec6:	6139      	str	r1, [r7, #16]
 8002ec8:	4629      	mov	r1, r5
 8002eca:	eb63 0301 	sbc.w	r3, r3, r1
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002edc:	4659      	mov	r1, fp
 8002ede:	018b      	lsls	r3, r1, #6
 8002ee0:	4651      	mov	r1, sl
 8002ee2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ee6:	4651      	mov	r1, sl
 8002ee8:	018a      	lsls	r2, r1, #6
 8002eea:	4651      	mov	r1, sl
 8002eec:	ebb2 0801 	subs.w	r8, r2, r1
 8002ef0:	4659      	mov	r1, fp
 8002ef2:	eb63 0901 	sbc.w	r9, r3, r1
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f0a:	4690      	mov	r8, r2
 8002f0c:	4699      	mov	r9, r3
 8002f0e:	4623      	mov	r3, r4
 8002f10:	eb18 0303 	adds.w	r3, r8, r3
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	462b      	mov	r3, r5
 8002f18:	eb49 0303 	adc.w	r3, r9, r3
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f2a:	4629      	mov	r1, r5
 8002f2c:	024b      	lsls	r3, r1, #9
 8002f2e:	4621      	mov	r1, r4
 8002f30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f34:	4621      	mov	r1, r4
 8002f36:	024a      	lsls	r2, r1, #9
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f3e:	2200      	movs	r2, #0
 8002f40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f48:	f7fd fca8 	bl	800089c <__aeabi_uldivmod>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4613      	mov	r3, r2
 8002f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f54:	e058      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f56:	4b38      	ldr	r3, [pc, #224]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	099b      	lsrs	r3, r3, #6
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	4618      	mov	r0, r3
 8002f60:	4611      	mov	r1, r2
 8002f62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f66:	623b      	str	r3, [r7, #32]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f70:	4642      	mov	r2, r8
 8002f72:	464b      	mov	r3, r9
 8002f74:	f04f 0000 	mov.w	r0, #0
 8002f78:	f04f 0100 	mov.w	r1, #0
 8002f7c:	0159      	lsls	r1, r3, #5
 8002f7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f82:	0150      	lsls	r0, r2, #5
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4641      	mov	r1, r8
 8002f8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f8e:	4649      	mov	r1, r9
 8002f90:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fa0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fa4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fa8:	ebb2 040a 	subs.w	r4, r2, sl
 8002fac:	eb63 050b 	sbc.w	r5, r3, fp
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	00eb      	lsls	r3, r5, #3
 8002fba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fbe:	00e2      	lsls	r2, r4, #3
 8002fc0:	4614      	mov	r4, r2
 8002fc2:	461d      	mov	r5, r3
 8002fc4:	4643      	mov	r3, r8
 8002fc6:	18e3      	adds	r3, r4, r3
 8002fc8:	603b      	str	r3, [r7, #0]
 8002fca:	464b      	mov	r3, r9
 8002fcc:	eb45 0303 	adc.w	r3, r5, r3
 8002fd0:	607b      	str	r3, [r7, #4]
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fde:	4629      	mov	r1, r5
 8002fe0:	028b      	lsls	r3, r1, #10
 8002fe2:	4621      	mov	r1, r4
 8002fe4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fe8:	4621      	mov	r1, r4
 8002fea:	028a      	lsls	r2, r1, #10
 8002fec:	4610      	mov	r0, r2
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	61fa      	str	r2, [r7, #28]
 8002ff8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ffc:	f7fd fc4e 	bl	800089c <__aeabi_uldivmod>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4613      	mov	r3, r2
 8003006:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003008:	4b0b      	ldr	r3, [pc, #44]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x200>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	0c1b      	lsrs	r3, r3, #16
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	3301      	adds	r3, #1
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003018:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800301a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800301c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003020:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003022:	e002      	b.n	800302a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003024:	4b05      	ldr	r3, [pc, #20]	@ (800303c <HAL_RCC_GetSysClockFreq+0x204>)
 8003026:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800302a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800302c:	4618      	mov	r0, r3
 800302e:	3750      	adds	r7, #80	@ 0x50
 8003030:	46bd      	mov	sp, r7
 8003032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003036:	bf00      	nop
 8003038:	40023800 	.word	0x40023800
 800303c:	00f42400 	.word	0x00f42400
 8003040:	007a1200 	.word	0x007a1200

08003044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e041      	b.n	80030da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fe faf2 	bl	8001654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3304      	adds	r3, #4
 8003080:	4619      	mov	r1, r3
 8003082:	4610      	mov	r0, r2
 8003084:	f000 fbe2 	bl	800384c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e041      	b.n	8003178 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d106      	bne.n	800310e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f839 	bl	8003180 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2202      	movs	r2, #2
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3304      	adds	r3, #4
 800311e:	4619      	mov	r1, r3
 8003120:	4610      	mov	r0, r2
 8003122:	f000 fb93 	bl	800384c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d109      	bne.n	80031b8 <HAL_TIM_PWM_Start+0x24>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	bf14      	ite	ne
 80031b0:	2301      	movne	r3, #1
 80031b2:	2300      	moveq	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	e022      	b.n	80031fe <HAL_TIM_PWM_Start+0x6a>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d109      	bne.n	80031d2 <HAL_TIM_PWM_Start+0x3e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	bf14      	ite	ne
 80031ca:	2301      	movne	r3, #1
 80031cc:	2300      	moveq	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	e015      	b.n	80031fe <HAL_TIM_PWM_Start+0x6a>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d109      	bne.n	80031ec <HAL_TIM_PWM_Start+0x58>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	bf14      	ite	ne
 80031e4:	2301      	movne	r3, #1
 80031e6:	2300      	moveq	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	e008      	b.n	80031fe <HAL_TIM_PWM_Start+0x6a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	bf14      	ite	ne
 80031f8:	2301      	movne	r3, #1
 80031fa:	2300      	moveq	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e068      	b.n	80032d8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d104      	bne.n	8003216 <HAL_TIM_PWM_Start+0x82>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003214:	e013      	b.n	800323e <HAL_TIM_PWM_Start+0xaa>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b04      	cmp	r3, #4
 800321a:	d104      	bne.n	8003226 <HAL_TIM_PWM_Start+0x92>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003224:	e00b      	b.n	800323e <HAL_TIM_PWM_Start+0xaa>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2b08      	cmp	r3, #8
 800322a:	d104      	bne.n	8003236 <HAL_TIM_PWM_Start+0xa2>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003234:	e003      	b.n	800323e <HAL_TIM_PWM_Start+0xaa>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2202      	movs	r2, #2
 800323a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2201      	movs	r2, #1
 8003244:	6839      	ldr	r1, [r7, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fdb2 	bl	8003db0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a23      	ldr	r2, [pc, #140]	@ (80032e0 <HAL_TIM_PWM_Start+0x14c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d107      	bne.n	8003266 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003264:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1d      	ldr	r2, [pc, #116]	@ (80032e0 <HAL_TIM_PWM_Start+0x14c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d018      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x10e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003278:	d013      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x10e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a19      	ldr	r2, [pc, #100]	@ (80032e4 <HAL_TIM_PWM_Start+0x150>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00e      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x10e>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a17      	ldr	r2, [pc, #92]	@ (80032e8 <HAL_TIM_PWM_Start+0x154>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d009      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x10e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a16      	ldr	r2, [pc, #88]	@ (80032ec <HAL_TIM_PWM_Start+0x158>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d004      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x10e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a14      	ldr	r2, [pc, #80]	@ (80032f0 <HAL_TIM_PWM_Start+0x15c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d111      	bne.n	80032c6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b06      	cmp	r3, #6
 80032b2:	d010      	beq.n	80032d6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0201 	orr.w	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c4:	e007      	b.n	80032d6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f042 0201 	orr.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40010000 	.word	0x40010000
 80032e4:	40000400 	.word	0x40000400
 80032e8:	40000800 	.word	0x40000800
 80032ec:	40000c00 	.word	0x40000c00
 80032f0:	40014000 	.word	0x40014000

080032f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d020      	beq.n	8003358 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01b      	beq.n	8003358 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0202 	mvn.w	r2, #2
 8003328:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fa65 	bl	800380e <HAL_TIM_IC_CaptureCallback>
 8003344:	e005      	b.n	8003352 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fa57 	bl	80037fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 fa68 	bl	8003822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b00      	cmp	r3, #0
 8003360:	d020      	beq.n	80033a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d01b      	beq.n	80033a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0204 	mvn.w	r2, #4
 8003374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2202      	movs	r2, #2
 800337a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fa3f 	bl	800380e <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fa31 	bl	80037fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fa42 	bl	8003822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d020      	beq.n	80033f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01b      	beq.n	80033f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f06f 0208 	mvn.w	r2, #8
 80033c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2204      	movs	r2, #4
 80033c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fa19 	bl	800380e <HAL_TIM_IC_CaptureCallback>
 80033dc:	e005      	b.n	80033ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fa0b 	bl	80037fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 fa1c 	bl	8003822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f003 0310 	and.w	r3, r3, #16
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d020      	beq.n	800343c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01b      	beq.n	800343c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f06f 0210 	mvn.w	r2, #16
 800340c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2208      	movs	r2, #8
 8003412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f9f3 	bl	800380e <HAL_TIM_IC_CaptureCallback>
 8003428:	e005      	b.n	8003436 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f9e5 	bl	80037fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f9f6 	bl	8003822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00c      	beq.n	8003460 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d007      	beq.n	8003460 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0201 	mvn.w	r2, #1
 8003458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f9c3 	bl	80037e6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00c      	beq.n	8003484 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003470:	2b00      	cmp	r3, #0
 8003472:	d007      	beq.n	8003484 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800347c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fd34 	bl	8003eec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00c      	beq.n	80034a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003494:	2b00      	cmp	r3, #0
 8003496:	d007      	beq.n	80034a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f9c7 	bl	8003836 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f003 0320 	and.w	r3, r3, #32
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00c      	beq.n	80034cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d007      	beq.n	80034cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0220 	mvn.w	r2, #32
 80034c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fd06 	bl	8003ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034cc:	bf00      	nop
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d101      	bne.n	80034f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034ee:	2302      	movs	r3, #2
 80034f0:	e0ae      	b.n	8003650 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b0c      	cmp	r3, #12
 80034fe:	f200 809f 	bhi.w	8003640 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003502:	a201      	add	r2, pc, #4	@ (adr r2, 8003508 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003508:	0800353d 	.word	0x0800353d
 800350c:	08003641 	.word	0x08003641
 8003510:	08003641 	.word	0x08003641
 8003514:	08003641 	.word	0x08003641
 8003518:	0800357d 	.word	0x0800357d
 800351c:	08003641 	.word	0x08003641
 8003520:	08003641 	.word	0x08003641
 8003524:	08003641 	.word	0x08003641
 8003528:	080035bf 	.word	0x080035bf
 800352c:	08003641 	.word	0x08003641
 8003530:	08003641 	.word	0x08003641
 8003534:	08003641 	.word	0x08003641
 8003538:	080035ff 	.word	0x080035ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68b9      	ldr	r1, [r7, #8]
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fa0e 	bl	8003964 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0208 	orr.w	r2, r2, #8
 8003556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699a      	ldr	r2, [r3, #24]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0204 	bic.w	r2, r2, #4
 8003566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6999      	ldr	r1, [r3, #24]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	691a      	ldr	r2, [r3, #16]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	619a      	str	r2, [r3, #24]
      break;
 800357a:	e064      	b.n	8003646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fa54 	bl	8003a30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699a      	ldr	r2, [r3, #24]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6999      	ldr	r1, [r3, #24]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	021a      	lsls	r2, r3, #8
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	619a      	str	r2, [r3, #24]
      break;
 80035bc:	e043      	b.n	8003646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68b9      	ldr	r1, [r7, #8]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fa9f 	bl	8003b08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69da      	ldr	r2, [r3, #28]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 0208 	orr.w	r2, r2, #8
 80035d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0204 	bic.w	r2, r2, #4
 80035e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69d9      	ldr	r1, [r3, #28]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	61da      	str	r2, [r3, #28]
      break;
 80035fc:	e023      	b.n	8003646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68b9      	ldr	r1, [r7, #8]
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fae9 	bl	8003bdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69da      	ldr	r2, [r3, #28]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69d9      	ldr	r1, [r3, #28]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	021a      	lsls	r2, r3, #8
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	61da      	str	r2, [r3, #28]
      break;
 800363e:	e002      	b.n	8003646 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	75fb      	strb	r3, [r7, #23]
      break;
 8003644:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800364e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_TIM_ConfigClockSource+0x1c>
 8003670:	2302      	movs	r3, #2
 8003672:	e0b4      	b.n	80037de <HAL_TIM_ConfigClockSource+0x186>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800369a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036ac:	d03e      	beq.n	800372c <HAL_TIM_ConfigClockSource+0xd4>
 80036ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036b2:	f200 8087 	bhi.w	80037c4 <HAL_TIM_ConfigClockSource+0x16c>
 80036b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ba:	f000 8086 	beq.w	80037ca <HAL_TIM_ConfigClockSource+0x172>
 80036be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036c2:	d87f      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x16c>
 80036c4:	2b70      	cmp	r3, #112	@ 0x70
 80036c6:	d01a      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0xa6>
 80036c8:	2b70      	cmp	r3, #112	@ 0x70
 80036ca:	d87b      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x16c>
 80036cc:	2b60      	cmp	r3, #96	@ 0x60
 80036ce:	d050      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0x11a>
 80036d0:	2b60      	cmp	r3, #96	@ 0x60
 80036d2:	d877      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x16c>
 80036d4:	2b50      	cmp	r3, #80	@ 0x50
 80036d6:	d03c      	beq.n	8003752 <HAL_TIM_ConfigClockSource+0xfa>
 80036d8:	2b50      	cmp	r3, #80	@ 0x50
 80036da:	d873      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x16c>
 80036dc:	2b40      	cmp	r3, #64	@ 0x40
 80036de:	d058      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0x13a>
 80036e0:	2b40      	cmp	r3, #64	@ 0x40
 80036e2:	d86f      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x16c>
 80036e4:	2b30      	cmp	r3, #48	@ 0x30
 80036e6:	d064      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x15a>
 80036e8:	2b30      	cmp	r3, #48	@ 0x30
 80036ea:	d86b      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x16c>
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d060      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x15a>
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d867      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x16c>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d05c      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x15a>
 80036f8:	2b10      	cmp	r3, #16
 80036fa:	d05a      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x15a>
 80036fc:	e062      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800370e:	f000 fb2f 	bl	8003d70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003720:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	609a      	str	r2, [r3, #8]
      break;
 800372a:	e04f      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800373c:	f000 fb18 	bl	8003d70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800374e:	609a      	str	r2, [r3, #8]
      break;
 8003750:	e03c      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800375e:	461a      	mov	r2, r3
 8003760:	f000 fa8c 	bl	8003c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2150      	movs	r1, #80	@ 0x50
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fae5 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 8003770:	e02c      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800377e:	461a      	mov	r2, r3
 8003780:	f000 faab 	bl	8003cda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2160      	movs	r1, #96	@ 0x60
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fad5 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 8003790:	e01c      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800379e:	461a      	mov	r2, r3
 80037a0:	f000 fa6c 	bl	8003c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2140      	movs	r1, #64	@ 0x40
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fac5 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 80037b0:	e00c      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4619      	mov	r1, r3
 80037bc:	4610      	mov	r0, r2
 80037be:	f000 fabc 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 80037c2:	e003      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
      break;
 80037c8:	e000      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
	...

0800384c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a3a      	ldr	r2, [pc, #232]	@ (8003948 <TIM_Base_SetConfig+0xfc>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d00f      	beq.n	8003884 <TIM_Base_SetConfig+0x38>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800386a:	d00b      	beq.n	8003884 <TIM_Base_SetConfig+0x38>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a37      	ldr	r2, [pc, #220]	@ (800394c <TIM_Base_SetConfig+0x100>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d007      	beq.n	8003884 <TIM_Base_SetConfig+0x38>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a36      	ldr	r2, [pc, #216]	@ (8003950 <TIM_Base_SetConfig+0x104>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d003      	beq.n	8003884 <TIM_Base_SetConfig+0x38>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a35      	ldr	r2, [pc, #212]	@ (8003954 <TIM_Base_SetConfig+0x108>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d108      	bne.n	8003896 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800388a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a2b      	ldr	r2, [pc, #172]	@ (8003948 <TIM_Base_SetConfig+0xfc>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d01b      	beq.n	80038d6 <TIM_Base_SetConfig+0x8a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a4:	d017      	beq.n	80038d6 <TIM_Base_SetConfig+0x8a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a28      	ldr	r2, [pc, #160]	@ (800394c <TIM_Base_SetConfig+0x100>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d013      	beq.n	80038d6 <TIM_Base_SetConfig+0x8a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a27      	ldr	r2, [pc, #156]	@ (8003950 <TIM_Base_SetConfig+0x104>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00f      	beq.n	80038d6 <TIM_Base_SetConfig+0x8a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a26      	ldr	r2, [pc, #152]	@ (8003954 <TIM_Base_SetConfig+0x108>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00b      	beq.n	80038d6 <TIM_Base_SetConfig+0x8a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a25      	ldr	r2, [pc, #148]	@ (8003958 <TIM_Base_SetConfig+0x10c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d007      	beq.n	80038d6 <TIM_Base_SetConfig+0x8a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a24      	ldr	r2, [pc, #144]	@ (800395c <TIM_Base_SetConfig+0x110>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d003      	beq.n	80038d6 <TIM_Base_SetConfig+0x8a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a23      	ldr	r2, [pc, #140]	@ (8003960 <TIM_Base_SetConfig+0x114>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d108      	bne.n	80038e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a0e      	ldr	r2, [pc, #56]	@ (8003948 <TIM_Base_SetConfig+0xfc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d103      	bne.n	800391c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b01      	cmp	r3, #1
 800392c:	d105      	bne.n	800393a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f023 0201 	bic.w	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	611a      	str	r2, [r3, #16]
  }
}
 800393a:	bf00      	nop
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40010000 	.word	0x40010000
 800394c:	40000400 	.word	0x40000400
 8003950:	40000800 	.word	0x40000800
 8003954:	40000c00 	.word	0x40000c00
 8003958:	40014000 	.word	0x40014000
 800395c:	40014400 	.word	0x40014400
 8003960:	40014800 	.word	0x40014800

08003964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	f023 0201 	bic.w	r2, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0303 	bic.w	r3, r3, #3
 800399a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f023 0302 	bic.w	r3, r3, #2
 80039ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a1c      	ldr	r2, [pc, #112]	@ (8003a2c <TIM_OC1_SetConfig+0xc8>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d10c      	bne.n	80039da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f023 0308 	bic.w	r3, r3, #8
 80039c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f023 0304 	bic.w	r3, r3, #4
 80039d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a13      	ldr	r2, [pc, #76]	@ (8003a2c <TIM_OC1_SetConfig+0xc8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d111      	bne.n	8003a06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	621a      	str	r2, [r3, #32]
}
 8003a20:	bf00      	nop
 8003a22:	371c      	adds	r7, #28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	40010000 	.word	0x40010000

08003a30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	f023 0210 	bic.w	r2, r3, #16
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f023 0320 	bic.w	r3, r3, #32
 8003a7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8003b04 <TIM_OC2_SetConfig+0xd4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d10d      	bne.n	8003aac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aaa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a15      	ldr	r2, [pc, #84]	@ (8003b04 <TIM_OC2_SetConfig+0xd4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d113      	bne.n	8003adc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003aba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	621a      	str	r2, [r3, #32]
}
 8003af6:	bf00      	nop
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40010000 	.word	0x40010000

08003b08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0303 	bic.w	r3, r3, #3
 8003b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	021b      	lsls	r3, r3, #8
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd8 <TIM_OC3_SetConfig+0xd0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d10d      	bne.n	8003b82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	021b      	lsls	r3, r3, #8
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a14      	ldr	r2, [pc, #80]	@ (8003bd8 <TIM_OC3_SetConfig+0xd0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d113      	bne.n	8003bb2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	621a      	str	r2, [r3, #32]
}
 8003bcc:	bf00      	nop
 8003bce:	371c      	adds	r7, #28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	40010000 	.word	0x40010000

08003bdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	021b      	lsls	r3, r3, #8
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	031b      	lsls	r3, r3, #12
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a10      	ldr	r2, [pc, #64]	@ (8003c78 <TIM_OC4_SetConfig+0x9c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d109      	bne.n	8003c50 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	019b      	lsls	r3, r3, #6
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	621a      	str	r2, [r3, #32]
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40010000 	.word	0x40010000

08003c7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	f023 0201 	bic.w	r2, r3, #1
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f023 030a 	bic.w	r3, r3, #10
 8003cb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	621a      	str	r2, [r3, #32]
}
 8003cce:	bf00      	nop
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b087      	sub	sp, #28
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f023 0210 	bic.w	r2, r3, #16
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	031b      	lsls	r3, r3, #12
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	621a      	str	r2, [r3, #32]
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b085      	sub	sp, #20
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f043 0307 	orr.w	r3, r3, #7
 8003d5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	021a      	lsls	r2, r3, #8
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	609a      	str	r2, [r3, #8]
}
 8003da4:	bf00      	nop
 8003da6:	371c      	adds	r7, #28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f003 031f 	and.w	r3, r3, #31
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a1a      	ldr	r2, [r3, #32]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	401a      	ands	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a1a      	ldr	r2, [r3, #32]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f003 031f 	and.w	r3, r3, #31
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	fa01 f303 	lsl.w	r3, r1, r3
 8003de8:	431a      	orrs	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	621a      	str	r2, [r3, #32]
}
 8003dee:	bf00      	nop
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e050      	b.n	8003eb6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a1c      	ldr	r2, [pc, #112]	@ (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d018      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e60:	d013      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a18      	ldr	r2, [pc, #96]	@ (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00e      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a16      	ldr	r2, [pc, #88]	@ (8003ecc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d009      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a15      	ldr	r2, [pc, #84]	@ (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d004      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a13      	ldr	r2, [pc, #76]	@ (8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d10c      	bne.n	8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40010000 	.word	0x40010000
 8003ec8:	40000400 	.word	0x40000400
 8003ecc:	40000800 	.word	0x40000800
 8003ed0:	40000c00 	.word	0x40000c00
 8003ed4:	40014000 	.word	0x40014000

08003ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <std>:
 8003f00:	2300      	movs	r3, #0
 8003f02:	b510      	push	{r4, lr}
 8003f04:	4604      	mov	r4, r0
 8003f06:	e9c0 3300 	strd	r3, r3, [r0]
 8003f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f0e:	6083      	str	r3, [r0, #8]
 8003f10:	8181      	strh	r1, [r0, #12]
 8003f12:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f14:	81c2      	strh	r2, [r0, #14]
 8003f16:	6183      	str	r3, [r0, #24]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	2208      	movs	r2, #8
 8003f1c:	305c      	adds	r0, #92	@ 0x5c
 8003f1e:	f000 f93a 	bl	8004196 <memset>
 8003f22:	4b0d      	ldr	r3, [pc, #52]	@ (8003f58 <std+0x58>)
 8003f24:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f26:	4b0d      	ldr	r3, [pc, #52]	@ (8003f5c <std+0x5c>)
 8003f28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f60 <std+0x60>)
 8003f2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f64 <std+0x64>)
 8003f30:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f32:	4b0d      	ldr	r3, [pc, #52]	@ (8003f68 <std+0x68>)
 8003f34:	6224      	str	r4, [r4, #32]
 8003f36:	429c      	cmp	r4, r3
 8003f38:	d006      	beq.n	8003f48 <std+0x48>
 8003f3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f3e:	4294      	cmp	r4, r2
 8003f40:	d002      	beq.n	8003f48 <std+0x48>
 8003f42:	33d0      	adds	r3, #208	@ 0xd0
 8003f44:	429c      	cmp	r4, r3
 8003f46:	d105      	bne.n	8003f54 <std+0x54>
 8003f48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f50:	f000 b99a 	b.w	8004288 <__retarget_lock_init_recursive>
 8003f54:	bd10      	pop	{r4, pc}
 8003f56:	bf00      	nop
 8003f58:	08004111 	.word	0x08004111
 8003f5c:	08004133 	.word	0x08004133
 8003f60:	0800416b 	.word	0x0800416b
 8003f64:	0800418f 	.word	0x0800418f
 8003f68:	2000012c 	.word	0x2000012c

08003f6c <stdio_exit_handler>:
 8003f6c:	4a02      	ldr	r2, [pc, #8]	@ (8003f78 <stdio_exit_handler+0xc>)
 8003f6e:	4903      	ldr	r1, [pc, #12]	@ (8003f7c <stdio_exit_handler+0x10>)
 8003f70:	4803      	ldr	r0, [pc, #12]	@ (8003f80 <stdio_exit_handler+0x14>)
 8003f72:	f000 b869 	b.w	8004048 <_fwalk_sglue>
 8003f76:	bf00      	nop
 8003f78:	20000010 	.word	0x20000010
 8003f7c:	08004dd9 	.word	0x08004dd9
 8003f80:	20000020 	.word	0x20000020

08003f84 <cleanup_stdio>:
 8003f84:	6841      	ldr	r1, [r0, #4]
 8003f86:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb8 <cleanup_stdio+0x34>)
 8003f88:	4299      	cmp	r1, r3
 8003f8a:	b510      	push	{r4, lr}
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	d001      	beq.n	8003f94 <cleanup_stdio+0x10>
 8003f90:	f000 ff22 	bl	8004dd8 <_fflush_r>
 8003f94:	68a1      	ldr	r1, [r4, #8]
 8003f96:	4b09      	ldr	r3, [pc, #36]	@ (8003fbc <cleanup_stdio+0x38>)
 8003f98:	4299      	cmp	r1, r3
 8003f9a:	d002      	beq.n	8003fa2 <cleanup_stdio+0x1e>
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	f000 ff1b 	bl	8004dd8 <_fflush_r>
 8003fa2:	68e1      	ldr	r1, [r4, #12]
 8003fa4:	4b06      	ldr	r3, [pc, #24]	@ (8003fc0 <cleanup_stdio+0x3c>)
 8003fa6:	4299      	cmp	r1, r3
 8003fa8:	d004      	beq.n	8003fb4 <cleanup_stdio+0x30>
 8003faa:	4620      	mov	r0, r4
 8003fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fb0:	f000 bf12 	b.w	8004dd8 <_fflush_r>
 8003fb4:	bd10      	pop	{r4, pc}
 8003fb6:	bf00      	nop
 8003fb8:	2000012c 	.word	0x2000012c
 8003fbc:	20000194 	.word	0x20000194
 8003fc0:	200001fc 	.word	0x200001fc

08003fc4 <global_stdio_init.part.0>:
 8003fc4:	b510      	push	{r4, lr}
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff4 <global_stdio_init.part.0+0x30>)
 8003fc8:	4c0b      	ldr	r4, [pc, #44]	@ (8003ff8 <global_stdio_init.part.0+0x34>)
 8003fca:	4a0c      	ldr	r2, [pc, #48]	@ (8003ffc <global_stdio_init.part.0+0x38>)
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	4620      	mov	r0, r4
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2104      	movs	r1, #4
 8003fd4:	f7ff ff94 	bl	8003f00 <std>
 8003fd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003fdc:	2201      	movs	r2, #1
 8003fde:	2109      	movs	r1, #9
 8003fe0:	f7ff ff8e 	bl	8003f00 <std>
 8003fe4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003fe8:	2202      	movs	r2, #2
 8003fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fee:	2112      	movs	r1, #18
 8003ff0:	f7ff bf86 	b.w	8003f00 <std>
 8003ff4:	20000264 	.word	0x20000264
 8003ff8:	2000012c 	.word	0x2000012c
 8003ffc:	08003f6d 	.word	0x08003f6d

08004000 <__sfp_lock_acquire>:
 8004000:	4801      	ldr	r0, [pc, #4]	@ (8004008 <__sfp_lock_acquire+0x8>)
 8004002:	f000 b942 	b.w	800428a <__retarget_lock_acquire_recursive>
 8004006:	bf00      	nop
 8004008:	2000026d 	.word	0x2000026d

0800400c <__sfp_lock_release>:
 800400c:	4801      	ldr	r0, [pc, #4]	@ (8004014 <__sfp_lock_release+0x8>)
 800400e:	f000 b93d 	b.w	800428c <__retarget_lock_release_recursive>
 8004012:	bf00      	nop
 8004014:	2000026d 	.word	0x2000026d

08004018 <__sinit>:
 8004018:	b510      	push	{r4, lr}
 800401a:	4604      	mov	r4, r0
 800401c:	f7ff fff0 	bl	8004000 <__sfp_lock_acquire>
 8004020:	6a23      	ldr	r3, [r4, #32]
 8004022:	b11b      	cbz	r3, 800402c <__sinit+0x14>
 8004024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004028:	f7ff bff0 	b.w	800400c <__sfp_lock_release>
 800402c:	4b04      	ldr	r3, [pc, #16]	@ (8004040 <__sinit+0x28>)
 800402e:	6223      	str	r3, [r4, #32]
 8004030:	4b04      	ldr	r3, [pc, #16]	@ (8004044 <__sinit+0x2c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1f5      	bne.n	8004024 <__sinit+0xc>
 8004038:	f7ff ffc4 	bl	8003fc4 <global_stdio_init.part.0>
 800403c:	e7f2      	b.n	8004024 <__sinit+0xc>
 800403e:	bf00      	nop
 8004040:	08003f85 	.word	0x08003f85
 8004044:	20000264 	.word	0x20000264

08004048 <_fwalk_sglue>:
 8004048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800404c:	4607      	mov	r7, r0
 800404e:	4688      	mov	r8, r1
 8004050:	4614      	mov	r4, r2
 8004052:	2600      	movs	r6, #0
 8004054:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004058:	f1b9 0901 	subs.w	r9, r9, #1
 800405c:	d505      	bpl.n	800406a <_fwalk_sglue+0x22>
 800405e:	6824      	ldr	r4, [r4, #0]
 8004060:	2c00      	cmp	r4, #0
 8004062:	d1f7      	bne.n	8004054 <_fwalk_sglue+0xc>
 8004064:	4630      	mov	r0, r6
 8004066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800406a:	89ab      	ldrh	r3, [r5, #12]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d907      	bls.n	8004080 <_fwalk_sglue+0x38>
 8004070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004074:	3301      	adds	r3, #1
 8004076:	d003      	beq.n	8004080 <_fwalk_sglue+0x38>
 8004078:	4629      	mov	r1, r5
 800407a:	4638      	mov	r0, r7
 800407c:	47c0      	blx	r8
 800407e:	4306      	orrs	r6, r0
 8004080:	3568      	adds	r5, #104	@ 0x68
 8004082:	e7e9      	b.n	8004058 <_fwalk_sglue+0x10>

08004084 <iprintf>:
 8004084:	b40f      	push	{r0, r1, r2, r3}
 8004086:	b507      	push	{r0, r1, r2, lr}
 8004088:	4906      	ldr	r1, [pc, #24]	@ (80040a4 <iprintf+0x20>)
 800408a:	ab04      	add	r3, sp, #16
 800408c:	6808      	ldr	r0, [r1, #0]
 800408e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004092:	6881      	ldr	r1, [r0, #8]
 8004094:	9301      	str	r3, [sp, #4]
 8004096:	f000 fb75 	bl	8004784 <_vfiprintf_r>
 800409a:	b003      	add	sp, #12
 800409c:	f85d eb04 	ldr.w	lr, [sp], #4
 80040a0:	b004      	add	sp, #16
 80040a2:	4770      	bx	lr
 80040a4:	2000001c 	.word	0x2000001c

080040a8 <sniprintf>:
 80040a8:	b40c      	push	{r2, r3}
 80040aa:	b530      	push	{r4, r5, lr}
 80040ac:	4b17      	ldr	r3, [pc, #92]	@ (800410c <sniprintf+0x64>)
 80040ae:	1e0c      	subs	r4, r1, #0
 80040b0:	681d      	ldr	r5, [r3, #0]
 80040b2:	b09d      	sub	sp, #116	@ 0x74
 80040b4:	da08      	bge.n	80040c8 <sniprintf+0x20>
 80040b6:	238b      	movs	r3, #139	@ 0x8b
 80040b8:	602b      	str	r3, [r5, #0]
 80040ba:	f04f 30ff 	mov.w	r0, #4294967295
 80040be:	b01d      	add	sp, #116	@ 0x74
 80040c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040c4:	b002      	add	sp, #8
 80040c6:	4770      	bx	lr
 80040c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80040cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80040d0:	bf14      	ite	ne
 80040d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80040d6:	4623      	moveq	r3, r4
 80040d8:	9304      	str	r3, [sp, #16]
 80040da:	9307      	str	r3, [sp, #28]
 80040dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80040e0:	9002      	str	r0, [sp, #8]
 80040e2:	9006      	str	r0, [sp, #24]
 80040e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80040e8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80040ea:	ab21      	add	r3, sp, #132	@ 0x84
 80040ec:	a902      	add	r1, sp, #8
 80040ee:	4628      	mov	r0, r5
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	f000 fa21 	bl	8004538 <_svfiprintf_r>
 80040f6:	1c43      	adds	r3, r0, #1
 80040f8:	bfbc      	itt	lt
 80040fa:	238b      	movlt	r3, #139	@ 0x8b
 80040fc:	602b      	strlt	r3, [r5, #0]
 80040fe:	2c00      	cmp	r4, #0
 8004100:	d0dd      	beq.n	80040be <sniprintf+0x16>
 8004102:	9b02      	ldr	r3, [sp, #8]
 8004104:	2200      	movs	r2, #0
 8004106:	701a      	strb	r2, [r3, #0]
 8004108:	e7d9      	b.n	80040be <sniprintf+0x16>
 800410a:	bf00      	nop
 800410c:	2000001c 	.word	0x2000001c

08004110 <__sread>:
 8004110:	b510      	push	{r4, lr}
 8004112:	460c      	mov	r4, r1
 8004114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004118:	f000 f868 	bl	80041ec <_read_r>
 800411c:	2800      	cmp	r0, #0
 800411e:	bfab      	itete	ge
 8004120:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004122:	89a3      	ldrhlt	r3, [r4, #12]
 8004124:	181b      	addge	r3, r3, r0
 8004126:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800412a:	bfac      	ite	ge
 800412c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800412e:	81a3      	strhlt	r3, [r4, #12]
 8004130:	bd10      	pop	{r4, pc}

08004132 <__swrite>:
 8004132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004136:	461f      	mov	r7, r3
 8004138:	898b      	ldrh	r3, [r1, #12]
 800413a:	05db      	lsls	r3, r3, #23
 800413c:	4605      	mov	r5, r0
 800413e:	460c      	mov	r4, r1
 8004140:	4616      	mov	r6, r2
 8004142:	d505      	bpl.n	8004150 <__swrite+0x1e>
 8004144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004148:	2302      	movs	r3, #2
 800414a:	2200      	movs	r2, #0
 800414c:	f000 f83c 	bl	80041c8 <_lseek_r>
 8004150:	89a3      	ldrh	r3, [r4, #12]
 8004152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004156:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800415a:	81a3      	strh	r3, [r4, #12]
 800415c:	4632      	mov	r2, r6
 800415e:	463b      	mov	r3, r7
 8004160:	4628      	mov	r0, r5
 8004162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004166:	f000 b853 	b.w	8004210 <_write_r>

0800416a <__sseek>:
 800416a:	b510      	push	{r4, lr}
 800416c:	460c      	mov	r4, r1
 800416e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004172:	f000 f829 	bl	80041c8 <_lseek_r>
 8004176:	1c43      	adds	r3, r0, #1
 8004178:	89a3      	ldrh	r3, [r4, #12]
 800417a:	bf15      	itete	ne
 800417c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800417e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004182:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004186:	81a3      	strheq	r3, [r4, #12]
 8004188:	bf18      	it	ne
 800418a:	81a3      	strhne	r3, [r4, #12]
 800418c:	bd10      	pop	{r4, pc}

0800418e <__sclose>:
 800418e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004192:	f000 b809 	b.w	80041a8 <_close_r>

08004196 <memset>:
 8004196:	4402      	add	r2, r0
 8004198:	4603      	mov	r3, r0
 800419a:	4293      	cmp	r3, r2
 800419c:	d100      	bne.n	80041a0 <memset+0xa>
 800419e:	4770      	bx	lr
 80041a0:	f803 1b01 	strb.w	r1, [r3], #1
 80041a4:	e7f9      	b.n	800419a <memset+0x4>
	...

080041a8 <_close_r>:
 80041a8:	b538      	push	{r3, r4, r5, lr}
 80041aa:	4d06      	ldr	r5, [pc, #24]	@ (80041c4 <_close_r+0x1c>)
 80041ac:	2300      	movs	r3, #0
 80041ae:	4604      	mov	r4, r0
 80041b0:	4608      	mov	r0, r1
 80041b2:	602b      	str	r3, [r5, #0]
 80041b4:	f7fd fb1f 	bl	80017f6 <_close>
 80041b8:	1c43      	adds	r3, r0, #1
 80041ba:	d102      	bne.n	80041c2 <_close_r+0x1a>
 80041bc:	682b      	ldr	r3, [r5, #0]
 80041be:	b103      	cbz	r3, 80041c2 <_close_r+0x1a>
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	bd38      	pop	{r3, r4, r5, pc}
 80041c4:	20000268 	.word	0x20000268

080041c8 <_lseek_r>:
 80041c8:	b538      	push	{r3, r4, r5, lr}
 80041ca:	4d07      	ldr	r5, [pc, #28]	@ (80041e8 <_lseek_r+0x20>)
 80041cc:	4604      	mov	r4, r0
 80041ce:	4608      	mov	r0, r1
 80041d0:	4611      	mov	r1, r2
 80041d2:	2200      	movs	r2, #0
 80041d4:	602a      	str	r2, [r5, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	f7fd fb34 	bl	8001844 <_lseek>
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	d102      	bne.n	80041e6 <_lseek_r+0x1e>
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	b103      	cbz	r3, 80041e6 <_lseek_r+0x1e>
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	bd38      	pop	{r3, r4, r5, pc}
 80041e8:	20000268 	.word	0x20000268

080041ec <_read_r>:
 80041ec:	b538      	push	{r3, r4, r5, lr}
 80041ee:	4d07      	ldr	r5, [pc, #28]	@ (800420c <_read_r+0x20>)
 80041f0:	4604      	mov	r4, r0
 80041f2:	4608      	mov	r0, r1
 80041f4:	4611      	mov	r1, r2
 80041f6:	2200      	movs	r2, #0
 80041f8:	602a      	str	r2, [r5, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	f7fd fac2 	bl	8001784 <_read>
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	d102      	bne.n	800420a <_read_r+0x1e>
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	b103      	cbz	r3, 800420a <_read_r+0x1e>
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	bd38      	pop	{r3, r4, r5, pc}
 800420c:	20000268 	.word	0x20000268

08004210 <_write_r>:
 8004210:	b538      	push	{r3, r4, r5, lr}
 8004212:	4d07      	ldr	r5, [pc, #28]	@ (8004230 <_write_r+0x20>)
 8004214:	4604      	mov	r4, r0
 8004216:	4608      	mov	r0, r1
 8004218:	4611      	mov	r1, r2
 800421a:	2200      	movs	r2, #0
 800421c:	602a      	str	r2, [r5, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	f7fd facd 	bl	80017be <_write>
 8004224:	1c43      	adds	r3, r0, #1
 8004226:	d102      	bne.n	800422e <_write_r+0x1e>
 8004228:	682b      	ldr	r3, [r5, #0]
 800422a:	b103      	cbz	r3, 800422e <_write_r+0x1e>
 800422c:	6023      	str	r3, [r4, #0]
 800422e:	bd38      	pop	{r3, r4, r5, pc}
 8004230:	20000268 	.word	0x20000268

08004234 <__errno>:
 8004234:	4b01      	ldr	r3, [pc, #4]	@ (800423c <__errno+0x8>)
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	2000001c 	.word	0x2000001c

08004240 <__libc_init_array>:
 8004240:	b570      	push	{r4, r5, r6, lr}
 8004242:	4d0d      	ldr	r5, [pc, #52]	@ (8004278 <__libc_init_array+0x38>)
 8004244:	4c0d      	ldr	r4, [pc, #52]	@ (800427c <__libc_init_array+0x3c>)
 8004246:	1b64      	subs	r4, r4, r5
 8004248:	10a4      	asrs	r4, r4, #2
 800424a:	2600      	movs	r6, #0
 800424c:	42a6      	cmp	r6, r4
 800424e:	d109      	bne.n	8004264 <__libc_init_array+0x24>
 8004250:	4d0b      	ldr	r5, [pc, #44]	@ (8004280 <__libc_init_array+0x40>)
 8004252:	4c0c      	ldr	r4, [pc, #48]	@ (8004284 <__libc_init_array+0x44>)
 8004254:	f000 ff6e 	bl	8005134 <_init>
 8004258:	1b64      	subs	r4, r4, r5
 800425a:	10a4      	asrs	r4, r4, #2
 800425c:	2600      	movs	r6, #0
 800425e:	42a6      	cmp	r6, r4
 8004260:	d105      	bne.n	800426e <__libc_init_array+0x2e>
 8004262:	bd70      	pop	{r4, r5, r6, pc}
 8004264:	f855 3b04 	ldr.w	r3, [r5], #4
 8004268:	4798      	blx	r3
 800426a:	3601      	adds	r6, #1
 800426c:	e7ee      	b.n	800424c <__libc_init_array+0xc>
 800426e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004272:	4798      	blx	r3
 8004274:	3601      	adds	r6, #1
 8004276:	e7f2      	b.n	800425e <__libc_init_array+0x1e>
 8004278:	08005240 	.word	0x08005240
 800427c:	08005240 	.word	0x08005240
 8004280:	08005240 	.word	0x08005240
 8004284:	08005244 	.word	0x08005244

08004288 <__retarget_lock_init_recursive>:
 8004288:	4770      	bx	lr

0800428a <__retarget_lock_acquire_recursive>:
 800428a:	4770      	bx	lr

0800428c <__retarget_lock_release_recursive>:
 800428c:	4770      	bx	lr
	...

08004290 <_free_r>:
 8004290:	b538      	push	{r3, r4, r5, lr}
 8004292:	4605      	mov	r5, r0
 8004294:	2900      	cmp	r1, #0
 8004296:	d041      	beq.n	800431c <_free_r+0x8c>
 8004298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800429c:	1f0c      	subs	r4, r1, #4
 800429e:	2b00      	cmp	r3, #0
 80042a0:	bfb8      	it	lt
 80042a2:	18e4      	addlt	r4, r4, r3
 80042a4:	f000 f8e0 	bl	8004468 <__malloc_lock>
 80042a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004320 <_free_r+0x90>)
 80042aa:	6813      	ldr	r3, [r2, #0]
 80042ac:	b933      	cbnz	r3, 80042bc <_free_r+0x2c>
 80042ae:	6063      	str	r3, [r4, #4]
 80042b0:	6014      	str	r4, [r2, #0]
 80042b2:	4628      	mov	r0, r5
 80042b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042b8:	f000 b8dc 	b.w	8004474 <__malloc_unlock>
 80042bc:	42a3      	cmp	r3, r4
 80042be:	d908      	bls.n	80042d2 <_free_r+0x42>
 80042c0:	6820      	ldr	r0, [r4, #0]
 80042c2:	1821      	adds	r1, r4, r0
 80042c4:	428b      	cmp	r3, r1
 80042c6:	bf01      	itttt	eq
 80042c8:	6819      	ldreq	r1, [r3, #0]
 80042ca:	685b      	ldreq	r3, [r3, #4]
 80042cc:	1809      	addeq	r1, r1, r0
 80042ce:	6021      	streq	r1, [r4, #0]
 80042d0:	e7ed      	b.n	80042ae <_free_r+0x1e>
 80042d2:	461a      	mov	r2, r3
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	b10b      	cbz	r3, 80042dc <_free_r+0x4c>
 80042d8:	42a3      	cmp	r3, r4
 80042da:	d9fa      	bls.n	80042d2 <_free_r+0x42>
 80042dc:	6811      	ldr	r1, [r2, #0]
 80042de:	1850      	adds	r0, r2, r1
 80042e0:	42a0      	cmp	r0, r4
 80042e2:	d10b      	bne.n	80042fc <_free_r+0x6c>
 80042e4:	6820      	ldr	r0, [r4, #0]
 80042e6:	4401      	add	r1, r0
 80042e8:	1850      	adds	r0, r2, r1
 80042ea:	4283      	cmp	r3, r0
 80042ec:	6011      	str	r1, [r2, #0]
 80042ee:	d1e0      	bne.n	80042b2 <_free_r+0x22>
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	6053      	str	r3, [r2, #4]
 80042f6:	4408      	add	r0, r1
 80042f8:	6010      	str	r0, [r2, #0]
 80042fa:	e7da      	b.n	80042b2 <_free_r+0x22>
 80042fc:	d902      	bls.n	8004304 <_free_r+0x74>
 80042fe:	230c      	movs	r3, #12
 8004300:	602b      	str	r3, [r5, #0]
 8004302:	e7d6      	b.n	80042b2 <_free_r+0x22>
 8004304:	6820      	ldr	r0, [r4, #0]
 8004306:	1821      	adds	r1, r4, r0
 8004308:	428b      	cmp	r3, r1
 800430a:	bf04      	itt	eq
 800430c:	6819      	ldreq	r1, [r3, #0]
 800430e:	685b      	ldreq	r3, [r3, #4]
 8004310:	6063      	str	r3, [r4, #4]
 8004312:	bf04      	itt	eq
 8004314:	1809      	addeq	r1, r1, r0
 8004316:	6021      	streq	r1, [r4, #0]
 8004318:	6054      	str	r4, [r2, #4]
 800431a:	e7ca      	b.n	80042b2 <_free_r+0x22>
 800431c:	bd38      	pop	{r3, r4, r5, pc}
 800431e:	bf00      	nop
 8004320:	20000274 	.word	0x20000274

08004324 <sbrk_aligned>:
 8004324:	b570      	push	{r4, r5, r6, lr}
 8004326:	4e0f      	ldr	r6, [pc, #60]	@ (8004364 <sbrk_aligned+0x40>)
 8004328:	460c      	mov	r4, r1
 800432a:	6831      	ldr	r1, [r6, #0]
 800432c:	4605      	mov	r5, r0
 800432e:	b911      	cbnz	r1, 8004336 <sbrk_aligned+0x12>
 8004330:	f000 fe28 	bl	8004f84 <_sbrk_r>
 8004334:	6030      	str	r0, [r6, #0]
 8004336:	4621      	mov	r1, r4
 8004338:	4628      	mov	r0, r5
 800433a:	f000 fe23 	bl	8004f84 <_sbrk_r>
 800433e:	1c43      	adds	r3, r0, #1
 8004340:	d103      	bne.n	800434a <sbrk_aligned+0x26>
 8004342:	f04f 34ff 	mov.w	r4, #4294967295
 8004346:	4620      	mov	r0, r4
 8004348:	bd70      	pop	{r4, r5, r6, pc}
 800434a:	1cc4      	adds	r4, r0, #3
 800434c:	f024 0403 	bic.w	r4, r4, #3
 8004350:	42a0      	cmp	r0, r4
 8004352:	d0f8      	beq.n	8004346 <sbrk_aligned+0x22>
 8004354:	1a21      	subs	r1, r4, r0
 8004356:	4628      	mov	r0, r5
 8004358:	f000 fe14 	bl	8004f84 <_sbrk_r>
 800435c:	3001      	adds	r0, #1
 800435e:	d1f2      	bne.n	8004346 <sbrk_aligned+0x22>
 8004360:	e7ef      	b.n	8004342 <sbrk_aligned+0x1e>
 8004362:	bf00      	nop
 8004364:	20000270 	.word	0x20000270

08004368 <_malloc_r>:
 8004368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800436c:	1ccd      	adds	r5, r1, #3
 800436e:	f025 0503 	bic.w	r5, r5, #3
 8004372:	3508      	adds	r5, #8
 8004374:	2d0c      	cmp	r5, #12
 8004376:	bf38      	it	cc
 8004378:	250c      	movcc	r5, #12
 800437a:	2d00      	cmp	r5, #0
 800437c:	4606      	mov	r6, r0
 800437e:	db01      	blt.n	8004384 <_malloc_r+0x1c>
 8004380:	42a9      	cmp	r1, r5
 8004382:	d904      	bls.n	800438e <_malloc_r+0x26>
 8004384:	230c      	movs	r3, #12
 8004386:	6033      	str	r3, [r6, #0]
 8004388:	2000      	movs	r0, #0
 800438a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800438e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004464 <_malloc_r+0xfc>
 8004392:	f000 f869 	bl	8004468 <__malloc_lock>
 8004396:	f8d8 3000 	ldr.w	r3, [r8]
 800439a:	461c      	mov	r4, r3
 800439c:	bb44      	cbnz	r4, 80043f0 <_malloc_r+0x88>
 800439e:	4629      	mov	r1, r5
 80043a0:	4630      	mov	r0, r6
 80043a2:	f7ff ffbf 	bl	8004324 <sbrk_aligned>
 80043a6:	1c43      	adds	r3, r0, #1
 80043a8:	4604      	mov	r4, r0
 80043aa:	d158      	bne.n	800445e <_malloc_r+0xf6>
 80043ac:	f8d8 4000 	ldr.w	r4, [r8]
 80043b0:	4627      	mov	r7, r4
 80043b2:	2f00      	cmp	r7, #0
 80043b4:	d143      	bne.n	800443e <_malloc_r+0xd6>
 80043b6:	2c00      	cmp	r4, #0
 80043b8:	d04b      	beq.n	8004452 <_malloc_r+0xea>
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	4639      	mov	r1, r7
 80043be:	4630      	mov	r0, r6
 80043c0:	eb04 0903 	add.w	r9, r4, r3
 80043c4:	f000 fdde 	bl	8004f84 <_sbrk_r>
 80043c8:	4581      	cmp	r9, r0
 80043ca:	d142      	bne.n	8004452 <_malloc_r+0xea>
 80043cc:	6821      	ldr	r1, [r4, #0]
 80043ce:	1a6d      	subs	r5, r5, r1
 80043d0:	4629      	mov	r1, r5
 80043d2:	4630      	mov	r0, r6
 80043d4:	f7ff ffa6 	bl	8004324 <sbrk_aligned>
 80043d8:	3001      	adds	r0, #1
 80043da:	d03a      	beq.n	8004452 <_malloc_r+0xea>
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	442b      	add	r3, r5
 80043e0:	6023      	str	r3, [r4, #0]
 80043e2:	f8d8 3000 	ldr.w	r3, [r8]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	bb62      	cbnz	r2, 8004444 <_malloc_r+0xdc>
 80043ea:	f8c8 7000 	str.w	r7, [r8]
 80043ee:	e00f      	b.n	8004410 <_malloc_r+0xa8>
 80043f0:	6822      	ldr	r2, [r4, #0]
 80043f2:	1b52      	subs	r2, r2, r5
 80043f4:	d420      	bmi.n	8004438 <_malloc_r+0xd0>
 80043f6:	2a0b      	cmp	r2, #11
 80043f8:	d917      	bls.n	800442a <_malloc_r+0xc2>
 80043fa:	1961      	adds	r1, r4, r5
 80043fc:	42a3      	cmp	r3, r4
 80043fe:	6025      	str	r5, [r4, #0]
 8004400:	bf18      	it	ne
 8004402:	6059      	strne	r1, [r3, #4]
 8004404:	6863      	ldr	r3, [r4, #4]
 8004406:	bf08      	it	eq
 8004408:	f8c8 1000 	streq.w	r1, [r8]
 800440c:	5162      	str	r2, [r4, r5]
 800440e:	604b      	str	r3, [r1, #4]
 8004410:	4630      	mov	r0, r6
 8004412:	f000 f82f 	bl	8004474 <__malloc_unlock>
 8004416:	f104 000b 	add.w	r0, r4, #11
 800441a:	1d23      	adds	r3, r4, #4
 800441c:	f020 0007 	bic.w	r0, r0, #7
 8004420:	1ac2      	subs	r2, r0, r3
 8004422:	bf1c      	itt	ne
 8004424:	1a1b      	subne	r3, r3, r0
 8004426:	50a3      	strne	r3, [r4, r2]
 8004428:	e7af      	b.n	800438a <_malloc_r+0x22>
 800442a:	6862      	ldr	r2, [r4, #4]
 800442c:	42a3      	cmp	r3, r4
 800442e:	bf0c      	ite	eq
 8004430:	f8c8 2000 	streq.w	r2, [r8]
 8004434:	605a      	strne	r2, [r3, #4]
 8004436:	e7eb      	b.n	8004410 <_malloc_r+0xa8>
 8004438:	4623      	mov	r3, r4
 800443a:	6864      	ldr	r4, [r4, #4]
 800443c:	e7ae      	b.n	800439c <_malloc_r+0x34>
 800443e:	463c      	mov	r4, r7
 8004440:	687f      	ldr	r7, [r7, #4]
 8004442:	e7b6      	b.n	80043b2 <_malloc_r+0x4a>
 8004444:	461a      	mov	r2, r3
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	42a3      	cmp	r3, r4
 800444a:	d1fb      	bne.n	8004444 <_malloc_r+0xdc>
 800444c:	2300      	movs	r3, #0
 800444e:	6053      	str	r3, [r2, #4]
 8004450:	e7de      	b.n	8004410 <_malloc_r+0xa8>
 8004452:	230c      	movs	r3, #12
 8004454:	6033      	str	r3, [r6, #0]
 8004456:	4630      	mov	r0, r6
 8004458:	f000 f80c 	bl	8004474 <__malloc_unlock>
 800445c:	e794      	b.n	8004388 <_malloc_r+0x20>
 800445e:	6005      	str	r5, [r0, #0]
 8004460:	e7d6      	b.n	8004410 <_malloc_r+0xa8>
 8004462:	bf00      	nop
 8004464:	20000274 	.word	0x20000274

08004468 <__malloc_lock>:
 8004468:	4801      	ldr	r0, [pc, #4]	@ (8004470 <__malloc_lock+0x8>)
 800446a:	f7ff bf0e 	b.w	800428a <__retarget_lock_acquire_recursive>
 800446e:	bf00      	nop
 8004470:	2000026c 	.word	0x2000026c

08004474 <__malloc_unlock>:
 8004474:	4801      	ldr	r0, [pc, #4]	@ (800447c <__malloc_unlock+0x8>)
 8004476:	f7ff bf09 	b.w	800428c <__retarget_lock_release_recursive>
 800447a:	bf00      	nop
 800447c:	2000026c 	.word	0x2000026c

08004480 <__ssputs_r>:
 8004480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004484:	688e      	ldr	r6, [r1, #8]
 8004486:	461f      	mov	r7, r3
 8004488:	42be      	cmp	r6, r7
 800448a:	680b      	ldr	r3, [r1, #0]
 800448c:	4682      	mov	sl, r0
 800448e:	460c      	mov	r4, r1
 8004490:	4690      	mov	r8, r2
 8004492:	d82d      	bhi.n	80044f0 <__ssputs_r+0x70>
 8004494:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004498:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800449c:	d026      	beq.n	80044ec <__ssputs_r+0x6c>
 800449e:	6965      	ldr	r5, [r4, #20]
 80044a0:	6909      	ldr	r1, [r1, #16]
 80044a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044a6:	eba3 0901 	sub.w	r9, r3, r1
 80044aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044ae:	1c7b      	adds	r3, r7, #1
 80044b0:	444b      	add	r3, r9
 80044b2:	106d      	asrs	r5, r5, #1
 80044b4:	429d      	cmp	r5, r3
 80044b6:	bf38      	it	cc
 80044b8:	461d      	movcc	r5, r3
 80044ba:	0553      	lsls	r3, r2, #21
 80044bc:	d527      	bpl.n	800450e <__ssputs_r+0x8e>
 80044be:	4629      	mov	r1, r5
 80044c0:	f7ff ff52 	bl	8004368 <_malloc_r>
 80044c4:	4606      	mov	r6, r0
 80044c6:	b360      	cbz	r0, 8004522 <__ssputs_r+0xa2>
 80044c8:	6921      	ldr	r1, [r4, #16]
 80044ca:	464a      	mov	r2, r9
 80044cc:	f000 fd6a 	bl	8004fa4 <memcpy>
 80044d0:	89a3      	ldrh	r3, [r4, #12]
 80044d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80044d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044da:	81a3      	strh	r3, [r4, #12]
 80044dc:	6126      	str	r6, [r4, #16]
 80044de:	6165      	str	r5, [r4, #20]
 80044e0:	444e      	add	r6, r9
 80044e2:	eba5 0509 	sub.w	r5, r5, r9
 80044e6:	6026      	str	r6, [r4, #0]
 80044e8:	60a5      	str	r5, [r4, #8]
 80044ea:	463e      	mov	r6, r7
 80044ec:	42be      	cmp	r6, r7
 80044ee:	d900      	bls.n	80044f2 <__ssputs_r+0x72>
 80044f0:	463e      	mov	r6, r7
 80044f2:	6820      	ldr	r0, [r4, #0]
 80044f4:	4632      	mov	r2, r6
 80044f6:	4641      	mov	r1, r8
 80044f8:	f000 fd2a 	bl	8004f50 <memmove>
 80044fc:	68a3      	ldr	r3, [r4, #8]
 80044fe:	1b9b      	subs	r3, r3, r6
 8004500:	60a3      	str	r3, [r4, #8]
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	4433      	add	r3, r6
 8004506:	6023      	str	r3, [r4, #0]
 8004508:	2000      	movs	r0, #0
 800450a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800450e:	462a      	mov	r2, r5
 8004510:	f000 fd56 	bl	8004fc0 <_realloc_r>
 8004514:	4606      	mov	r6, r0
 8004516:	2800      	cmp	r0, #0
 8004518:	d1e0      	bne.n	80044dc <__ssputs_r+0x5c>
 800451a:	6921      	ldr	r1, [r4, #16]
 800451c:	4650      	mov	r0, sl
 800451e:	f7ff feb7 	bl	8004290 <_free_r>
 8004522:	230c      	movs	r3, #12
 8004524:	f8ca 3000 	str.w	r3, [sl]
 8004528:	89a3      	ldrh	r3, [r4, #12]
 800452a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800452e:	81a3      	strh	r3, [r4, #12]
 8004530:	f04f 30ff 	mov.w	r0, #4294967295
 8004534:	e7e9      	b.n	800450a <__ssputs_r+0x8a>
	...

08004538 <_svfiprintf_r>:
 8004538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800453c:	4698      	mov	r8, r3
 800453e:	898b      	ldrh	r3, [r1, #12]
 8004540:	061b      	lsls	r3, r3, #24
 8004542:	b09d      	sub	sp, #116	@ 0x74
 8004544:	4607      	mov	r7, r0
 8004546:	460d      	mov	r5, r1
 8004548:	4614      	mov	r4, r2
 800454a:	d510      	bpl.n	800456e <_svfiprintf_r+0x36>
 800454c:	690b      	ldr	r3, [r1, #16]
 800454e:	b973      	cbnz	r3, 800456e <_svfiprintf_r+0x36>
 8004550:	2140      	movs	r1, #64	@ 0x40
 8004552:	f7ff ff09 	bl	8004368 <_malloc_r>
 8004556:	6028      	str	r0, [r5, #0]
 8004558:	6128      	str	r0, [r5, #16]
 800455a:	b930      	cbnz	r0, 800456a <_svfiprintf_r+0x32>
 800455c:	230c      	movs	r3, #12
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	f04f 30ff 	mov.w	r0, #4294967295
 8004564:	b01d      	add	sp, #116	@ 0x74
 8004566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800456a:	2340      	movs	r3, #64	@ 0x40
 800456c:	616b      	str	r3, [r5, #20]
 800456e:	2300      	movs	r3, #0
 8004570:	9309      	str	r3, [sp, #36]	@ 0x24
 8004572:	2320      	movs	r3, #32
 8004574:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004578:	f8cd 800c 	str.w	r8, [sp, #12]
 800457c:	2330      	movs	r3, #48	@ 0x30
 800457e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800471c <_svfiprintf_r+0x1e4>
 8004582:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004586:	f04f 0901 	mov.w	r9, #1
 800458a:	4623      	mov	r3, r4
 800458c:	469a      	mov	sl, r3
 800458e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004592:	b10a      	cbz	r2, 8004598 <_svfiprintf_r+0x60>
 8004594:	2a25      	cmp	r2, #37	@ 0x25
 8004596:	d1f9      	bne.n	800458c <_svfiprintf_r+0x54>
 8004598:	ebba 0b04 	subs.w	fp, sl, r4
 800459c:	d00b      	beq.n	80045b6 <_svfiprintf_r+0x7e>
 800459e:	465b      	mov	r3, fp
 80045a0:	4622      	mov	r2, r4
 80045a2:	4629      	mov	r1, r5
 80045a4:	4638      	mov	r0, r7
 80045a6:	f7ff ff6b 	bl	8004480 <__ssputs_r>
 80045aa:	3001      	adds	r0, #1
 80045ac:	f000 80a7 	beq.w	80046fe <_svfiprintf_r+0x1c6>
 80045b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045b2:	445a      	add	r2, fp
 80045b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80045b6:	f89a 3000 	ldrb.w	r3, [sl]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 809f 	beq.w	80046fe <_svfiprintf_r+0x1c6>
 80045c0:	2300      	movs	r3, #0
 80045c2:	f04f 32ff 	mov.w	r2, #4294967295
 80045c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045ca:	f10a 0a01 	add.w	sl, sl, #1
 80045ce:	9304      	str	r3, [sp, #16]
 80045d0:	9307      	str	r3, [sp, #28]
 80045d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80045d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80045d8:	4654      	mov	r4, sl
 80045da:	2205      	movs	r2, #5
 80045dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045e0:	484e      	ldr	r0, [pc, #312]	@ (800471c <_svfiprintf_r+0x1e4>)
 80045e2:	f7fb fe05 	bl	80001f0 <memchr>
 80045e6:	9a04      	ldr	r2, [sp, #16]
 80045e8:	b9d8      	cbnz	r0, 8004622 <_svfiprintf_r+0xea>
 80045ea:	06d0      	lsls	r0, r2, #27
 80045ec:	bf44      	itt	mi
 80045ee:	2320      	movmi	r3, #32
 80045f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045f4:	0711      	lsls	r1, r2, #28
 80045f6:	bf44      	itt	mi
 80045f8:	232b      	movmi	r3, #43	@ 0x2b
 80045fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004602:	2b2a      	cmp	r3, #42	@ 0x2a
 8004604:	d015      	beq.n	8004632 <_svfiprintf_r+0xfa>
 8004606:	9a07      	ldr	r2, [sp, #28]
 8004608:	4654      	mov	r4, sl
 800460a:	2000      	movs	r0, #0
 800460c:	f04f 0c0a 	mov.w	ip, #10
 8004610:	4621      	mov	r1, r4
 8004612:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004616:	3b30      	subs	r3, #48	@ 0x30
 8004618:	2b09      	cmp	r3, #9
 800461a:	d94b      	bls.n	80046b4 <_svfiprintf_r+0x17c>
 800461c:	b1b0      	cbz	r0, 800464c <_svfiprintf_r+0x114>
 800461e:	9207      	str	r2, [sp, #28]
 8004620:	e014      	b.n	800464c <_svfiprintf_r+0x114>
 8004622:	eba0 0308 	sub.w	r3, r0, r8
 8004626:	fa09 f303 	lsl.w	r3, r9, r3
 800462a:	4313      	orrs	r3, r2
 800462c:	9304      	str	r3, [sp, #16]
 800462e:	46a2      	mov	sl, r4
 8004630:	e7d2      	b.n	80045d8 <_svfiprintf_r+0xa0>
 8004632:	9b03      	ldr	r3, [sp, #12]
 8004634:	1d19      	adds	r1, r3, #4
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	9103      	str	r1, [sp, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	bfbb      	ittet	lt
 800463e:	425b      	neglt	r3, r3
 8004640:	f042 0202 	orrlt.w	r2, r2, #2
 8004644:	9307      	strge	r3, [sp, #28]
 8004646:	9307      	strlt	r3, [sp, #28]
 8004648:	bfb8      	it	lt
 800464a:	9204      	strlt	r2, [sp, #16]
 800464c:	7823      	ldrb	r3, [r4, #0]
 800464e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004650:	d10a      	bne.n	8004668 <_svfiprintf_r+0x130>
 8004652:	7863      	ldrb	r3, [r4, #1]
 8004654:	2b2a      	cmp	r3, #42	@ 0x2a
 8004656:	d132      	bne.n	80046be <_svfiprintf_r+0x186>
 8004658:	9b03      	ldr	r3, [sp, #12]
 800465a:	1d1a      	adds	r2, r3, #4
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	9203      	str	r2, [sp, #12]
 8004660:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004664:	3402      	adds	r4, #2
 8004666:	9305      	str	r3, [sp, #20]
 8004668:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800472c <_svfiprintf_r+0x1f4>
 800466c:	7821      	ldrb	r1, [r4, #0]
 800466e:	2203      	movs	r2, #3
 8004670:	4650      	mov	r0, sl
 8004672:	f7fb fdbd 	bl	80001f0 <memchr>
 8004676:	b138      	cbz	r0, 8004688 <_svfiprintf_r+0x150>
 8004678:	9b04      	ldr	r3, [sp, #16]
 800467a:	eba0 000a 	sub.w	r0, r0, sl
 800467e:	2240      	movs	r2, #64	@ 0x40
 8004680:	4082      	lsls	r2, r0
 8004682:	4313      	orrs	r3, r2
 8004684:	3401      	adds	r4, #1
 8004686:	9304      	str	r3, [sp, #16]
 8004688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800468c:	4824      	ldr	r0, [pc, #144]	@ (8004720 <_svfiprintf_r+0x1e8>)
 800468e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004692:	2206      	movs	r2, #6
 8004694:	f7fb fdac 	bl	80001f0 <memchr>
 8004698:	2800      	cmp	r0, #0
 800469a:	d036      	beq.n	800470a <_svfiprintf_r+0x1d2>
 800469c:	4b21      	ldr	r3, [pc, #132]	@ (8004724 <_svfiprintf_r+0x1ec>)
 800469e:	bb1b      	cbnz	r3, 80046e8 <_svfiprintf_r+0x1b0>
 80046a0:	9b03      	ldr	r3, [sp, #12]
 80046a2:	3307      	adds	r3, #7
 80046a4:	f023 0307 	bic.w	r3, r3, #7
 80046a8:	3308      	adds	r3, #8
 80046aa:	9303      	str	r3, [sp, #12]
 80046ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046ae:	4433      	add	r3, r6
 80046b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80046b2:	e76a      	b.n	800458a <_svfiprintf_r+0x52>
 80046b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80046b8:	460c      	mov	r4, r1
 80046ba:	2001      	movs	r0, #1
 80046bc:	e7a8      	b.n	8004610 <_svfiprintf_r+0xd8>
 80046be:	2300      	movs	r3, #0
 80046c0:	3401      	adds	r4, #1
 80046c2:	9305      	str	r3, [sp, #20]
 80046c4:	4619      	mov	r1, r3
 80046c6:	f04f 0c0a 	mov.w	ip, #10
 80046ca:	4620      	mov	r0, r4
 80046cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046d0:	3a30      	subs	r2, #48	@ 0x30
 80046d2:	2a09      	cmp	r2, #9
 80046d4:	d903      	bls.n	80046de <_svfiprintf_r+0x1a6>
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0c6      	beq.n	8004668 <_svfiprintf_r+0x130>
 80046da:	9105      	str	r1, [sp, #20]
 80046dc:	e7c4      	b.n	8004668 <_svfiprintf_r+0x130>
 80046de:	fb0c 2101 	mla	r1, ip, r1, r2
 80046e2:	4604      	mov	r4, r0
 80046e4:	2301      	movs	r3, #1
 80046e6:	e7f0      	b.n	80046ca <_svfiprintf_r+0x192>
 80046e8:	ab03      	add	r3, sp, #12
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	462a      	mov	r2, r5
 80046ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004728 <_svfiprintf_r+0x1f0>)
 80046f0:	a904      	add	r1, sp, #16
 80046f2:	4638      	mov	r0, r7
 80046f4:	f3af 8000 	nop.w
 80046f8:	1c42      	adds	r2, r0, #1
 80046fa:	4606      	mov	r6, r0
 80046fc:	d1d6      	bne.n	80046ac <_svfiprintf_r+0x174>
 80046fe:	89ab      	ldrh	r3, [r5, #12]
 8004700:	065b      	lsls	r3, r3, #25
 8004702:	f53f af2d 	bmi.w	8004560 <_svfiprintf_r+0x28>
 8004706:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004708:	e72c      	b.n	8004564 <_svfiprintf_r+0x2c>
 800470a:	ab03      	add	r3, sp, #12
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	462a      	mov	r2, r5
 8004710:	4b05      	ldr	r3, [pc, #20]	@ (8004728 <_svfiprintf_r+0x1f0>)
 8004712:	a904      	add	r1, sp, #16
 8004714:	4638      	mov	r0, r7
 8004716:	f000 f9bb 	bl	8004a90 <_printf_i>
 800471a:	e7ed      	b.n	80046f8 <_svfiprintf_r+0x1c0>
 800471c:	08005204 	.word	0x08005204
 8004720:	0800520e 	.word	0x0800520e
 8004724:	00000000 	.word	0x00000000
 8004728:	08004481 	.word	0x08004481
 800472c:	0800520a 	.word	0x0800520a

08004730 <__sfputc_r>:
 8004730:	6893      	ldr	r3, [r2, #8]
 8004732:	3b01      	subs	r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	b410      	push	{r4}
 8004738:	6093      	str	r3, [r2, #8]
 800473a:	da08      	bge.n	800474e <__sfputc_r+0x1e>
 800473c:	6994      	ldr	r4, [r2, #24]
 800473e:	42a3      	cmp	r3, r4
 8004740:	db01      	blt.n	8004746 <__sfputc_r+0x16>
 8004742:	290a      	cmp	r1, #10
 8004744:	d103      	bne.n	800474e <__sfputc_r+0x1e>
 8004746:	f85d 4b04 	ldr.w	r4, [sp], #4
 800474a:	f000 bb6d 	b.w	8004e28 <__swbuf_r>
 800474e:	6813      	ldr	r3, [r2, #0]
 8004750:	1c58      	adds	r0, r3, #1
 8004752:	6010      	str	r0, [r2, #0]
 8004754:	7019      	strb	r1, [r3, #0]
 8004756:	4608      	mov	r0, r1
 8004758:	f85d 4b04 	ldr.w	r4, [sp], #4
 800475c:	4770      	bx	lr

0800475e <__sfputs_r>:
 800475e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004760:	4606      	mov	r6, r0
 8004762:	460f      	mov	r7, r1
 8004764:	4614      	mov	r4, r2
 8004766:	18d5      	adds	r5, r2, r3
 8004768:	42ac      	cmp	r4, r5
 800476a:	d101      	bne.n	8004770 <__sfputs_r+0x12>
 800476c:	2000      	movs	r0, #0
 800476e:	e007      	b.n	8004780 <__sfputs_r+0x22>
 8004770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004774:	463a      	mov	r2, r7
 8004776:	4630      	mov	r0, r6
 8004778:	f7ff ffda 	bl	8004730 <__sfputc_r>
 800477c:	1c43      	adds	r3, r0, #1
 800477e:	d1f3      	bne.n	8004768 <__sfputs_r+0xa>
 8004780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004784 <_vfiprintf_r>:
 8004784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004788:	460d      	mov	r5, r1
 800478a:	b09d      	sub	sp, #116	@ 0x74
 800478c:	4614      	mov	r4, r2
 800478e:	4698      	mov	r8, r3
 8004790:	4606      	mov	r6, r0
 8004792:	b118      	cbz	r0, 800479c <_vfiprintf_r+0x18>
 8004794:	6a03      	ldr	r3, [r0, #32]
 8004796:	b90b      	cbnz	r3, 800479c <_vfiprintf_r+0x18>
 8004798:	f7ff fc3e 	bl	8004018 <__sinit>
 800479c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800479e:	07d9      	lsls	r1, r3, #31
 80047a0:	d405      	bmi.n	80047ae <_vfiprintf_r+0x2a>
 80047a2:	89ab      	ldrh	r3, [r5, #12]
 80047a4:	059a      	lsls	r2, r3, #22
 80047a6:	d402      	bmi.n	80047ae <_vfiprintf_r+0x2a>
 80047a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80047aa:	f7ff fd6e 	bl	800428a <__retarget_lock_acquire_recursive>
 80047ae:	89ab      	ldrh	r3, [r5, #12]
 80047b0:	071b      	lsls	r3, r3, #28
 80047b2:	d501      	bpl.n	80047b8 <_vfiprintf_r+0x34>
 80047b4:	692b      	ldr	r3, [r5, #16]
 80047b6:	b99b      	cbnz	r3, 80047e0 <_vfiprintf_r+0x5c>
 80047b8:	4629      	mov	r1, r5
 80047ba:	4630      	mov	r0, r6
 80047bc:	f000 fb72 	bl	8004ea4 <__swsetup_r>
 80047c0:	b170      	cbz	r0, 80047e0 <_vfiprintf_r+0x5c>
 80047c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80047c4:	07dc      	lsls	r4, r3, #31
 80047c6:	d504      	bpl.n	80047d2 <_vfiprintf_r+0x4e>
 80047c8:	f04f 30ff 	mov.w	r0, #4294967295
 80047cc:	b01d      	add	sp, #116	@ 0x74
 80047ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047d2:	89ab      	ldrh	r3, [r5, #12]
 80047d4:	0598      	lsls	r0, r3, #22
 80047d6:	d4f7      	bmi.n	80047c8 <_vfiprintf_r+0x44>
 80047d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80047da:	f7ff fd57 	bl	800428c <__retarget_lock_release_recursive>
 80047de:	e7f3      	b.n	80047c8 <_vfiprintf_r+0x44>
 80047e0:	2300      	movs	r3, #0
 80047e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80047e4:	2320      	movs	r3, #32
 80047e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80047ee:	2330      	movs	r3, #48	@ 0x30
 80047f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80049a0 <_vfiprintf_r+0x21c>
 80047f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047f8:	f04f 0901 	mov.w	r9, #1
 80047fc:	4623      	mov	r3, r4
 80047fe:	469a      	mov	sl, r3
 8004800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004804:	b10a      	cbz	r2, 800480a <_vfiprintf_r+0x86>
 8004806:	2a25      	cmp	r2, #37	@ 0x25
 8004808:	d1f9      	bne.n	80047fe <_vfiprintf_r+0x7a>
 800480a:	ebba 0b04 	subs.w	fp, sl, r4
 800480e:	d00b      	beq.n	8004828 <_vfiprintf_r+0xa4>
 8004810:	465b      	mov	r3, fp
 8004812:	4622      	mov	r2, r4
 8004814:	4629      	mov	r1, r5
 8004816:	4630      	mov	r0, r6
 8004818:	f7ff ffa1 	bl	800475e <__sfputs_r>
 800481c:	3001      	adds	r0, #1
 800481e:	f000 80a7 	beq.w	8004970 <_vfiprintf_r+0x1ec>
 8004822:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004824:	445a      	add	r2, fp
 8004826:	9209      	str	r2, [sp, #36]	@ 0x24
 8004828:	f89a 3000 	ldrb.w	r3, [sl]
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 809f 	beq.w	8004970 <_vfiprintf_r+0x1ec>
 8004832:	2300      	movs	r3, #0
 8004834:	f04f 32ff 	mov.w	r2, #4294967295
 8004838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800483c:	f10a 0a01 	add.w	sl, sl, #1
 8004840:	9304      	str	r3, [sp, #16]
 8004842:	9307      	str	r3, [sp, #28]
 8004844:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004848:	931a      	str	r3, [sp, #104]	@ 0x68
 800484a:	4654      	mov	r4, sl
 800484c:	2205      	movs	r2, #5
 800484e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004852:	4853      	ldr	r0, [pc, #332]	@ (80049a0 <_vfiprintf_r+0x21c>)
 8004854:	f7fb fccc 	bl	80001f0 <memchr>
 8004858:	9a04      	ldr	r2, [sp, #16]
 800485a:	b9d8      	cbnz	r0, 8004894 <_vfiprintf_r+0x110>
 800485c:	06d1      	lsls	r1, r2, #27
 800485e:	bf44      	itt	mi
 8004860:	2320      	movmi	r3, #32
 8004862:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004866:	0713      	lsls	r3, r2, #28
 8004868:	bf44      	itt	mi
 800486a:	232b      	movmi	r3, #43	@ 0x2b
 800486c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004870:	f89a 3000 	ldrb.w	r3, [sl]
 8004874:	2b2a      	cmp	r3, #42	@ 0x2a
 8004876:	d015      	beq.n	80048a4 <_vfiprintf_r+0x120>
 8004878:	9a07      	ldr	r2, [sp, #28]
 800487a:	4654      	mov	r4, sl
 800487c:	2000      	movs	r0, #0
 800487e:	f04f 0c0a 	mov.w	ip, #10
 8004882:	4621      	mov	r1, r4
 8004884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004888:	3b30      	subs	r3, #48	@ 0x30
 800488a:	2b09      	cmp	r3, #9
 800488c:	d94b      	bls.n	8004926 <_vfiprintf_r+0x1a2>
 800488e:	b1b0      	cbz	r0, 80048be <_vfiprintf_r+0x13a>
 8004890:	9207      	str	r2, [sp, #28]
 8004892:	e014      	b.n	80048be <_vfiprintf_r+0x13a>
 8004894:	eba0 0308 	sub.w	r3, r0, r8
 8004898:	fa09 f303 	lsl.w	r3, r9, r3
 800489c:	4313      	orrs	r3, r2
 800489e:	9304      	str	r3, [sp, #16]
 80048a0:	46a2      	mov	sl, r4
 80048a2:	e7d2      	b.n	800484a <_vfiprintf_r+0xc6>
 80048a4:	9b03      	ldr	r3, [sp, #12]
 80048a6:	1d19      	adds	r1, r3, #4
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	9103      	str	r1, [sp, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	bfbb      	ittet	lt
 80048b0:	425b      	neglt	r3, r3
 80048b2:	f042 0202 	orrlt.w	r2, r2, #2
 80048b6:	9307      	strge	r3, [sp, #28]
 80048b8:	9307      	strlt	r3, [sp, #28]
 80048ba:	bfb8      	it	lt
 80048bc:	9204      	strlt	r2, [sp, #16]
 80048be:	7823      	ldrb	r3, [r4, #0]
 80048c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80048c2:	d10a      	bne.n	80048da <_vfiprintf_r+0x156>
 80048c4:	7863      	ldrb	r3, [r4, #1]
 80048c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80048c8:	d132      	bne.n	8004930 <_vfiprintf_r+0x1ac>
 80048ca:	9b03      	ldr	r3, [sp, #12]
 80048cc:	1d1a      	adds	r2, r3, #4
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	9203      	str	r2, [sp, #12]
 80048d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80048d6:	3402      	adds	r4, #2
 80048d8:	9305      	str	r3, [sp, #20]
 80048da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80049b0 <_vfiprintf_r+0x22c>
 80048de:	7821      	ldrb	r1, [r4, #0]
 80048e0:	2203      	movs	r2, #3
 80048e2:	4650      	mov	r0, sl
 80048e4:	f7fb fc84 	bl	80001f0 <memchr>
 80048e8:	b138      	cbz	r0, 80048fa <_vfiprintf_r+0x176>
 80048ea:	9b04      	ldr	r3, [sp, #16]
 80048ec:	eba0 000a 	sub.w	r0, r0, sl
 80048f0:	2240      	movs	r2, #64	@ 0x40
 80048f2:	4082      	lsls	r2, r0
 80048f4:	4313      	orrs	r3, r2
 80048f6:	3401      	adds	r4, #1
 80048f8:	9304      	str	r3, [sp, #16]
 80048fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048fe:	4829      	ldr	r0, [pc, #164]	@ (80049a4 <_vfiprintf_r+0x220>)
 8004900:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004904:	2206      	movs	r2, #6
 8004906:	f7fb fc73 	bl	80001f0 <memchr>
 800490a:	2800      	cmp	r0, #0
 800490c:	d03f      	beq.n	800498e <_vfiprintf_r+0x20a>
 800490e:	4b26      	ldr	r3, [pc, #152]	@ (80049a8 <_vfiprintf_r+0x224>)
 8004910:	bb1b      	cbnz	r3, 800495a <_vfiprintf_r+0x1d6>
 8004912:	9b03      	ldr	r3, [sp, #12]
 8004914:	3307      	adds	r3, #7
 8004916:	f023 0307 	bic.w	r3, r3, #7
 800491a:	3308      	adds	r3, #8
 800491c:	9303      	str	r3, [sp, #12]
 800491e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004920:	443b      	add	r3, r7
 8004922:	9309      	str	r3, [sp, #36]	@ 0x24
 8004924:	e76a      	b.n	80047fc <_vfiprintf_r+0x78>
 8004926:	fb0c 3202 	mla	r2, ip, r2, r3
 800492a:	460c      	mov	r4, r1
 800492c:	2001      	movs	r0, #1
 800492e:	e7a8      	b.n	8004882 <_vfiprintf_r+0xfe>
 8004930:	2300      	movs	r3, #0
 8004932:	3401      	adds	r4, #1
 8004934:	9305      	str	r3, [sp, #20]
 8004936:	4619      	mov	r1, r3
 8004938:	f04f 0c0a 	mov.w	ip, #10
 800493c:	4620      	mov	r0, r4
 800493e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004942:	3a30      	subs	r2, #48	@ 0x30
 8004944:	2a09      	cmp	r2, #9
 8004946:	d903      	bls.n	8004950 <_vfiprintf_r+0x1cc>
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0c6      	beq.n	80048da <_vfiprintf_r+0x156>
 800494c:	9105      	str	r1, [sp, #20]
 800494e:	e7c4      	b.n	80048da <_vfiprintf_r+0x156>
 8004950:	fb0c 2101 	mla	r1, ip, r1, r2
 8004954:	4604      	mov	r4, r0
 8004956:	2301      	movs	r3, #1
 8004958:	e7f0      	b.n	800493c <_vfiprintf_r+0x1b8>
 800495a:	ab03      	add	r3, sp, #12
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	462a      	mov	r2, r5
 8004960:	4b12      	ldr	r3, [pc, #72]	@ (80049ac <_vfiprintf_r+0x228>)
 8004962:	a904      	add	r1, sp, #16
 8004964:	4630      	mov	r0, r6
 8004966:	f3af 8000 	nop.w
 800496a:	4607      	mov	r7, r0
 800496c:	1c78      	adds	r0, r7, #1
 800496e:	d1d6      	bne.n	800491e <_vfiprintf_r+0x19a>
 8004970:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004972:	07d9      	lsls	r1, r3, #31
 8004974:	d405      	bmi.n	8004982 <_vfiprintf_r+0x1fe>
 8004976:	89ab      	ldrh	r3, [r5, #12]
 8004978:	059a      	lsls	r2, r3, #22
 800497a:	d402      	bmi.n	8004982 <_vfiprintf_r+0x1fe>
 800497c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800497e:	f7ff fc85 	bl	800428c <__retarget_lock_release_recursive>
 8004982:	89ab      	ldrh	r3, [r5, #12]
 8004984:	065b      	lsls	r3, r3, #25
 8004986:	f53f af1f 	bmi.w	80047c8 <_vfiprintf_r+0x44>
 800498a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800498c:	e71e      	b.n	80047cc <_vfiprintf_r+0x48>
 800498e:	ab03      	add	r3, sp, #12
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	462a      	mov	r2, r5
 8004994:	4b05      	ldr	r3, [pc, #20]	@ (80049ac <_vfiprintf_r+0x228>)
 8004996:	a904      	add	r1, sp, #16
 8004998:	4630      	mov	r0, r6
 800499a:	f000 f879 	bl	8004a90 <_printf_i>
 800499e:	e7e4      	b.n	800496a <_vfiprintf_r+0x1e6>
 80049a0:	08005204 	.word	0x08005204
 80049a4:	0800520e 	.word	0x0800520e
 80049a8:	00000000 	.word	0x00000000
 80049ac:	0800475f 	.word	0x0800475f
 80049b0:	0800520a 	.word	0x0800520a

080049b4 <_printf_common>:
 80049b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049b8:	4616      	mov	r6, r2
 80049ba:	4698      	mov	r8, r3
 80049bc:	688a      	ldr	r2, [r1, #8]
 80049be:	690b      	ldr	r3, [r1, #16]
 80049c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80049c4:	4293      	cmp	r3, r2
 80049c6:	bfb8      	it	lt
 80049c8:	4613      	movlt	r3, r2
 80049ca:	6033      	str	r3, [r6, #0]
 80049cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80049d0:	4607      	mov	r7, r0
 80049d2:	460c      	mov	r4, r1
 80049d4:	b10a      	cbz	r2, 80049da <_printf_common+0x26>
 80049d6:	3301      	adds	r3, #1
 80049d8:	6033      	str	r3, [r6, #0]
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	0699      	lsls	r1, r3, #26
 80049de:	bf42      	ittt	mi
 80049e0:	6833      	ldrmi	r3, [r6, #0]
 80049e2:	3302      	addmi	r3, #2
 80049e4:	6033      	strmi	r3, [r6, #0]
 80049e6:	6825      	ldr	r5, [r4, #0]
 80049e8:	f015 0506 	ands.w	r5, r5, #6
 80049ec:	d106      	bne.n	80049fc <_printf_common+0x48>
 80049ee:	f104 0a19 	add.w	sl, r4, #25
 80049f2:	68e3      	ldr	r3, [r4, #12]
 80049f4:	6832      	ldr	r2, [r6, #0]
 80049f6:	1a9b      	subs	r3, r3, r2
 80049f8:	42ab      	cmp	r3, r5
 80049fa:	dc26      	bgt.n	8004a4a <_printf_common+0x96>
 80049fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a00:	6822      	ldr	r2, [r4, #0]
 8004a02:	3b00      	subs	r3, #0
 8004a04:	bf18      	it	ne
 8004a06:	2301      	movne	r3, #1
 8004a08:	0692      	lsls	r2, r2, #26
 8004a0a:	d42b      	bmi.n	8004a64 <_printf_common+0xb0>
 8004a0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a10:	4641      	mov	r1, r8
 8004a12:	4638      	mov	r0, r7
 8004a14:	47c8      	blx	r9
 8004a16:	3001      	adds	r0, #1
 8004a18:	d01e      	beq.n	8004a58 <_printf_common+0xa4>
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	6922      	ldr	r2, [r4, #16]
 8004a1e:	f003 0306 	and.w	r3, r3, #6
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	bf02      	ittt	eq
 8004a26:	68e5      	ldreq	r5, [r4, #12]
 8004a28:	6833      	ldreq	r3, [r6, #0]
 8004a2a:	1aed      	subeq	r5, r5, r3
 8004a2c:	68a3      	ldr	r3, [r4, #8]
 8004a2e:	bf0c      	ite	eq
 8004a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a34:	2500      	movne	r5, #0
 8004a36:	4293      	cmp	r3, r2
 8004a38:	bfc4      	itt	gt
 8004a3a:	1a9b      	subgt	r3, r3, r2
 8004a3c:	18ed      	addgt	r5, r5, r3
 8004a3e:	2600      	movs	r6, #0
 8004a40:	341a      	adds	r4, #26
 8004a42:	42b5      	cmp	r5, r6
 8004a44:	d11a      	bne.n	8004a7c <_printf_common+0xc8>
 8004a46:	2000      	movs	r0, #0
 8004a48:	e008      	b.n	8004a5c <_printf_common+0xa8>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	4652      	mov	r2, sl
 8004a4e:	4641      	mov	r1, r8
 8004a50:	4638      	mov	r0, r7
 8004a52:	47c8      	blx	r9
 8004a54:	3001      	adds	r0, #1
 8004a56:	d103      	bne.n	8004a60 <_printf_common+0xac>
 8004a58:	f04f 30ff 	mov.w	r0, #4294967295
 8004a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a60:	3501      	adds	r5, #1
 8004a62:	e7c6      	b.n	80049f2 <_printf_common+0x3e>
 8004a64:	18e1      	adds	r1, r4, r3
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	2030      	movs	r0, #48	@ 0x30
 8004a6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a6e:	4422      	add	r2, r4
 8004a70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a78:	3302      	adds	r3, #2
 8004a7a:	e7c7      	b.n	8004a0c <_printf_common+0x58>
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	4622      	mov	r2, r4
 8004a80:	4641      	mov	r1, r8
 8004a82:	4638      	mov	r0, r7
 8004a84:	47c8      	blx	r9
 8004a86:	3001      	adds	r0, #1
 8004a88:	d0e6      	beq.n	8004a58 <_printf_common+0xa4>
 8004a8a:	3601      	adds	r6, #1
 8004a8c:	e7d9      	b.n	8004a42 <_printf_common+0x8e>
	...

08004a90 <_printf_i>:
 8004a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a94:	7e0f      	ldrb	r7, [r1, #24]
 8004a96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a98:	2f78      	cmp	r7, #120	@ 0x78
 8004a9a:	4691      	mov	r9, r2
 8004a9c:	4680      	mov	r8, r0
 8004a9e:	460c      	mov	r4, r1
 8004aa0:	469a      	mov	sl, r3
 8004aa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004aa6:	d807      	bhi.n	8004ab8 <_printf_i+0x28>
 8004aa8:	2f62      	cmp	r7, #98	@ 0x62
 8004aaa:	d80a      	bhi.n	8004ac2 <_printf_i+0x32>
 8004aac:	2f00      	cmp	r7, #0
 8004aae:	f000 80d2 	beq.w	8004c56 <_printf_i+0x1c6>
 8004ab2:	2f58      	cmp	r7, #88	@ 0x58
 8004ab4:	f000 80b9 	beq.w	8004c2a <_printf_i+0x19a>
 8004ab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004abc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ac0:	e03a      	b.n	8004b38 <_printf_i+0xa8>
 8004ac2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ac6:	2b15      	cmp	r3, #21
 8004ac8:	d8f6      	bhi.n	8004ab8 <_printf_i+0x28>
 8004aca:	a101      	add	r1, pc, #4	@ (adr r1, 8004ad0 <_printf_i+0x40>)
 8004acc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ad0:	08004b29 	.word	0x08004b29
 8004ad4:	08004b3d 	.word	0x08004b3d
 8004ad8:	08004ab9 	.word	0x08004ab9
 8004adc:	08004ab9 	.word	0x08004ab9
 8004ae0:	08004ab9 	.word	0x08004ab9
 8004ae4:	08004ab9 	.word	0x08004ab9
 8004ae8:	08004b3d 	.word	0x08004b3d
 8004aec:	08004ab9 	.word	0x08004ab9
 8004af0:	08004ab9 	.word	0x08004ab9
 8004af4:	08004ab9 	.word	0x08004ab9
 8004af8:	08004ab9 	.word	0x08004ab9
 8004afc:	08004c3d 	.word	0x08004c3d
 8004b00:	08004b67 	.word	0x08004b67
 8004b04:	08004bf7 	.word	0x08004bf7
 8004b08:	08004ab9 	.word	0x08004ab9
 8004b0c:	08004ab9 	.word	0x08004ab9
 8004b10:	08004c5f 	.word	0x08004c5f
 8004b14:	08004ab9 	.word	0x08004ab9
 8004b18:	08004b67 	.word	0x08004b67
 8004b1c:	08004ab9 	.word	0x08004ab9
 8004b20:	08004ab9 	.word	0x08004ab9
 8004b24:	08004bff 	.word	0x08004bff
 8004b28:	6833      	ldr	r3, [r6, #0]
 8004b2a:	1d1a      	adds	r2, r3, #4
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6032      	str	r2, [r6, #0]
 8004b30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e09d      	b.n	8004c78 <_printf_i+0x1e8>
 8004b3c:	6833      	ldr	r3, [r6, #0]
 8004b3e:	6820      	ldr	r0, [r4, #0]
 8004b40:	1d19      	adds	r1, r3, #4
 8004b42:	6031      	str	r1, [r6, #0]
 8004b44:	0606      	lsls	r6, r0, #24
 8004b46:	d501      	bpl.n	8004b4c <_printf_i+0xbc>
 8004b48:	681d      	ldr	r5, [r3, #0]
 8004b4a:	e003      	b.n	8004b54 <_printf_i+0xc4>
 8004b4c:	0645      	lsls	r5, r0, #25
 8004b4e:	d5fb      	bpl.n	8004b48 <_printf_i+0xb8>
 8004b50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b54:	2d00      	cmp	r5, #0
 8004b56:	da03      	bge.n	8004b60 <_printf_i+0xd0>
 8004b58:	232d      	movs	r3, #45	@ 0x2d
 8004b5a:	426d      	negs	r5, r5
 8004b5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b60:	4859      	ldr	r0, [pc, #356]	@ (8004cc8 <_printf_i+0x238>)
 8004b62:	230a      	movs	r3, #10
 8004b64:	e011      	b.n	8004b8a <_printf_i+0xfa>
 8004b66:	6821      	ldr	r1, [r4, #0]
 8004b68:	6833      	ldr	r3, [r6, #0]
 8004b6a:	0608      	lsls	r0, r1, #24
 8004b6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b70:	d402      	bmi.n	8004b78 <_printf_i+0xe8>
 8004b72:	0649      	lsls	r1, r1, #25
 8004b74:	bf48      	it	mi
 8004b76:	b2ad      	uxthmi	r5, r5
 8004b78:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b7a:	4853      	ldr	r0, [pc, #332]	@ (8004cc8 <_printf_i+0x238>)
 8004b7c:	6033      	str	r3, [r6, #0]
 8004b7e:	bf14      	ite	ne
 8004b80:	230a      	movne	r3, #10
 8004b82:	2308      	moveq	r3, #8
 8004b84:	2100      	movs	r1, #0
 8004b86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b8a:	6866      	ldr	r6, [r4, #4]
 8004b8c:	60a6      	str	r6, [r4, #8]
 8004b8e:	2e00      	cmp	r6, #0
 8004b90:	bfa2      	ittt	ge
 8004b92:	6821      	ldrge	r1, [r4, #0]
 8004b94:	f021 0104 	bicge.w	r1, r1, #4
 8004b98:	6021      	strge	r1, [r4, #0]
 8004b9a:	b90d      	cbnz	r5, 8004ba0 <_printf_i+0x110>
 8004b9c:	2e00      	cmp	r6, #0
 8004b9e:	d04b      	beq.n	8004c38 <_printf_i+0x1a8>
 8004ba0:	4616      	mov	r6, r2
 8004ba2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ba6:	fb03 5711 	mls	r7, r3, r1, r5
 8004baa:	5dc7      	ldrb	r7, [r0, r7]
 8004bac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004bb0:	462f      	mov	r7, r5
 8004bb2:	42bb      	cmp	r3, r7
 8004bb4:	460d      	mov	r5, r1
 8004bb6:	d9f4      	bls.n	8004ba2 <_printf_i+0x112>
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d10b      	bne.n	8004bd4 <_printf_i+0x144>
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	07df      	lsls	r7, r3, #31
 8004bc0:	d508      	bpl.n	8004bd4 <_printf_i+0x144>
 8004bc2:	6923      	ldr	r3, [r4, #16]
 8004bc4:	6861      	ldr	r1, [r4, #4]
 8004bc6:	4299      	cmp	r1, r3
 8004bc8:	bfde      	ittt	le
 8004bca:	2330      	movle	r3, #48	@ 0x30
 8004bcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004bd4:	1b92      	subs	r2, r2, r6
 8004bd6:	6122      	str	r2, [r4, #16]
 8004bd8:	f8cd a000 	str.w	sl, [sp]
 8004bdc:	464b      	mov	r3, r9
 8004bde:	aa03      	add	r2, sp, #12
 8004be0:	4621      	mov	r1, r4
 8004be2:	4640      	mov	r0, r8
 8004be4:	f7ff fee6 	bl	80049b4 <_printf_common>
 8004be8:	3001      	adds	r0, #1
 8004bea:	d14a      	bne.n	8004c82 <_printf_i+0x1f2>
 8004bec:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf0:	b004      	add	sp, #16
 8004bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	f043 0320 	orr.w	r3, r3, #32
 8004bfc:	6023      	str	r3, [r4, #0]
 8004bfe:	4833      	ldr	r0, [pc, #204]	@ (8004ccc <_printf_i+0x23c>)
 8004c00:	2778      	movs	r7, #120	@ 0x78
 8004c02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	6831      	ldr	r1, [r6, #0]
 8004c0a:	061f      	lsls	r7, r3, #24
 8004c0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c10:	d402      	bmi.n	8004c18 <_printf_i+0x188>
 8004c12:	065f      	lsls	r7, r3, #25
 8004c14:	bf48      	it	mi
 8004c16:	b2ad      	uxthmi	r5, r5
 8004c18:	6031      	str	r1, [r6, #0]
 8004c1a:	07d9      	lsls	r1, r3, #31
 8004c1c:	bf44      	itt	mi
 8004c1e:	f043 0320 	orrmi.w	r3, r3, #32
 8004c22:	6023      	strmi	r3, [r4, #0]
 8004c24:	b11d      	cbz	r5, 8004c2e <_printf_i+0x19e>
 8004c26:	2310      	movs	r3, #16
 8004c28:	e7ac      	b.n	8004b84 <_printf_i+0xf4>
 8004c2a:	4827      	ldr	r0, [pc, #156]	@ (8004cc8 <_printf_i+0x238>)
 8004c2c:	e7e9      	b.n	8004c02 <_printf_i+0x172>
 8004c2e:	6823      	ldr	r3, [r4, #0]
 8004c30:	f023 0320 	bic.w	r3, r3, #32
 8004c34:	6023      	str	r3, [r4, #0]
 8004c36:	e7f6      	b.n	8004c26 <_printf_i+0x196>
 8004c38:	4616      	mov	r6, r2
 8004c3a:	e7bd      	b.n	8004bb8 <_printf_i+0x128>
 8004c3c:	6833      	ldr	r3, [r6, #0]
 8004c3e:	6825      	ldr	r5, [r4, #0]
 8004c40:	6961      	ldr	r1, [r4, #20]
 8004c42:	1d18      	adds	r0, r3, #4
 8004c44:	6030      	str	r0, [r6, #0]
 8004c46:	062e      	lsls	r6, r5, #24
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	d501      	bpl.n	8004c50 <_printf_i+0x1c0>
 8004c4c:	6019      	str	r1, [r3, #0]
 8004c4e:	e002      	b.n	8004c56 <_printf_i+0x1c6>
 8004c50:	0668      	lsls	r0, r5, #25
 8004c52:	d5fb      	bpl.n	8004c4c <_printf_i+0x1bc>
 8004c54:	8019      	strh	r1, [r3, #0]
 8004c56:	2300      	movs	r3, #0
 8004c58:	6123      	str	r3, [r4, #16]
 8004c5a:	4616      	mov	r6, r2
 8004c5c:	e7bc      	b.n	8004bd8 <_printf_i+0x148>
 8004c5e:	6833      	ldr	r3, [r6, #0]
 8004c60:	1d1a      	adds	r2, r3, #4
 8004c62:	6032      	str	r2, [r6, #0]
 8004c64:	681e      	ldr	r6, [r3, #0]
 8004c66:	6862      	ldr	r2, [r4, #4]
 8004c68:	2100      	movs	r1, #0
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	f7fb fac0 	bl	80001f0 <memchr>
 8004c70:	b108      	cbz	r0, 8004c76 <_printf_i+0x1e6>
 8004c72:	1b80      	subs	r0, r0, r6
 8004c74:	6060      	str	r0, [r4, #4]
 8004c76:	6863      	ldr	r3, [r4, #4]
 8004c78:	6123      	str	r3, [r4, #16]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c80:	e7aa      	b.n	8004bd8 <_printf_i+0x148>
 8004c82:	6923      	ldr	r3, [r4, #16]
 8004c84:	4632      	mov	r2, r6
 8004c86:	4649      	mov	r1, r9
 8004c88:	4640      	mov	r0, r8
 8004c8a:	47d0      	blx	sl
 8004c8c:	3001      	adds	r0, #1
 8004c8e:	d0ad      	beq.n	8004bec <_printf_i+0x15c>
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	079b      	lsls	r3, r3, #30
 8004c94:	d413      	bmi.n	8004cbe <_printf_i+0x22e>
 8004c96:	68e0      	ldr	r0, [r4, #12]
 8004c98:	9b03      	ldr	r3, [sp, #12]
 8004c9a:	4298      	cmp	r0, r3
 8004c9c:	bfb8      	it	lt
 8004c9e:	4618      	movlt	r0, r3
 8004ca0:	e7a6      	b.n	8004bf0 <_printf_i+0x160>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	4632      	mov	r2, r6
 8004ca6:	4649      	mov	r1, r9
 8004ca8:	4640      	mov	r0, r8
 8004caa:	47d0      	blx	sl
 8004cac:	3001      	adds	r0, #1
 8004cae:	d09d      	beq.n	8004bec <_printf_i+0x15c>
 8004cb0:	3501      	adds	r5, #1
 8004cb2:	68e3      	ldr	r3, [r4, #12]
 8004cb4:	9903      	ldr	r1, [sp, #12]
 8004cb6:	1a5b      	subs	r3, r3, r1
 8004cb8:	42ab      	cmp	r3, r5
 8004cba:	dcf2      	bgt.n	8004ca2 <_printf_i+0x212>
 8004cbc:	e7eb      	b.n	8004c96 <_printf_i+0x206>
 8004cbe:	2500      	movs	r5, #0
 8004cc0:	f104 0619 	add.w	r6, r4, #25
 8004cc4:	e7f5      	b.n	8004cb2 <_printf_i+0x222>
 8004cc6:	bf00      	nop
 8004cc8:	08005215 	.word	0x08005215
 8004ccc:	08005226 	.word	0x08005226

08004cd0 <__sflush_r>:
 8004cd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd8:	0716      	lsls	r6, r2, #28
 8004cda:	4605      	mov	r5, r0
 8004cdc:	460c      	mov	r4, r1
 8004cde:	d454      	bmi.n	8004d8a <__sflush_r+0xba>
 8004ce0:	684b      	ldr	r3, [r1, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	dc02      	bgt.n	8004cec <__sflush_r+0x1c>
 8004ce6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	dd48      	ble.n	8004d7e <__sflush_r+0xae>
 8004cec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004cee:	2e00      	cmp	r6, #0
 8004cf0:	d045      	beq.n	8004d7e <__sflush_r+0xae>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004cf8:	682f      	ldr	r7, [r5, #0]
 8004cfa:	6a21      	ldr	r1, [r4, #32]
 8004cfc:	602b      	str	r3, [r5, #0]
 8004cfe:	d030      	beq.n	8004d62 <__sflush_r+0x92>
 8004d00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004d02:	89a3      	ldrh	r3, [r4, #12]
 8004d04:	0759      	lsls	r1, r3, #29
 8004d06:	d505      	bpl.n	8004d14 <__sflush_r+0x44>
 8004d08:	6863      	ldr	r3, [r4, #4]
 8004d0a:	1ad2      	subs	r2, r2, r3
 8004d0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004d0e:	b10b      	cbz	r3, 8004d14 <__sflush_r+0x44>
 8004d10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d12:	1ad2      	subs	r2, r2, r3
 8004d14:	2300      	movs	r3, #0
 8004d16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004d18:	6a21      	ldr	r1, [r4, #32]
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	47b0      	blx	r6
 8004d1e:	1c43      	adds	r3, r0, #1
 8004d20:	89a3      	ldrh	r3, [r4, #12]
 8004d22:	d106      	bne.n	8004d32 <__sflush_r+0x62>
 8004d24:	6829      	ldr	r1, [r5, #0]
 8004d26:	291d      	cmp	r1, #29
 8004d28:	d82b      	bhi.n	8004d82 <__sflush_r+0xb2>
 8004d2a:	4a2a      	ldr	r2, [pc, #168]	@ (8004dd4 <__sflush_r+0x104>)
 8004d2c:	410a      	asrs	r2, r1
 8004d2e:	07d6      	lsls	r6, r2, #31
 8004d30:	d427      	bmi.n	8004d82 <__sflush_r+0xb2>
 8004d32:	2200      	movs	r2, #0
 8004d34:	6062      	str	r2, [r4, #4]
 8004d36:	04d9      	lsls	r1, r3, #19
 8004d38:	6922      	ldr	r2, [r4, #16]
 8004d3a:	6022      	str	r2, [r4, #0]
 8004d3c:	d504      	bpl.n	8004d48 <__sflush_r+0x78>
 8004d3e:	1c42      	adds	r2, r0, #1
 8004d40:	d101      	bne.n	8004d46 <__sflush_r+0x76>
 8004d42:	682b      	ldr	r3, [r5, #0]
 8004d44:	b903      	cbnz	r3, 8004d48 <__sflush_r+0x78>
 8004d46:	6560      	str	r0, [r4, #84]	@ 0x54
 8004d48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d4a:	602f      	str	r7, [r5, #0]
 8004d4c:	b1b9      	cbz	r1, 8004d7e <__sflush_r+0xae>
 8004d4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d52:	4299      	cmp	r1, r3
 8004d54:	d002      	beq.n	8004d5c <__sflush_r+0x8c>
 8004d56:	4628      	mov	r0, r5
 8004d58:	f7ff fa9a 	bl	8004290 <_free_r>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d60:	e00d      	b.n	8004d7e <__sflush_r+0xae>
 8004d62:	2301      	movs	r3, #1
 8004d64:	4628      	mov	r0, r5
 8004d66:	47b0      	blx	r6
 8004d68:	4602      	mov	r2, r0
 8004d6a:	1c50      	adds	r0, r2, #1
 8004d6c:	d1c9      	bne.n	8004d02 <__sflush_r+0x32>
 8004d6e:	682b      	ldr	r3, [r5, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0c6      	beq.n	8004d02 <__sflush_r+0x32>
 8004d74:	2b1d      	cmp	r3, #29
 8004d76:	d001      	beq.n	8004d7c <__sflush_r+0xac>
 8004d78:	2b16      	cmp	r3, #22
 8004d7a:	d11e      	bne.n	8004dba <__sflush_r+0xea>
 8004d7c:	602f      	str	r7, [r5, #0]
 8004d7e:	2000      	movs	r0, #0
 8004d80:	e022      	b.n	8004dc8 <__sflush_r+0xf8>
 8004d82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d86:	b21b      	sxth	r3, r3
 8004d88:	e01b      	b.n	8004dc2 <__sflush_r+0xf2>
 8004d8a:	690f      	ldr	r7, [r1, #16]
 8004d8c:	2f00      	cmp	r7, #0
 8004d8e:	d0f6      	beq.n	8004d7e <__sflush_r+0xae>
 8004d90:	0793      	lsls	r3, r2, #30
 8004d92:	680e      	ldr	r6, [r1, #0]
 8004d94:	bf08      	it	eq
 8004d96:	694b      	ldreq	r3, [r1, #20]
 8004d98:	600f      	str	r7, [r1, #0]
 8004d9a:	bf18      	it	ne
 8004d9c:	2300      	movne	r3, #0
 8004d9e:	eba6 0807 	sub.w	r8, r6, r7
 8004da2:	608b      	str	r3, [r1, #8]
 8004da4:	f1b8 0f00 	cmp.w	r8, #0
 8004da8:	dde9      	ble.n	8004d7e <__sflush_r+0xae>
 8004daa:	6a21      	ldr	r1, [r4, #32]
 8004dac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004dae:	4643      	mov	r3, r8
 8004db0:	463a      	mov	r2, r7
 8004db2:	4628      	mov	r0, r5
 8004db4:	47b0      	blx	r6
 8004db6:	2800      	cmp	r0, #0
 8004db8:	dc08      	bgt.n	8004dcc <__sflush_r+0xfc>
 8004dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dc2:	81a3      	strh	r3, [r4, #12]
 8004dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dcc:	4407      	add	r7, r0
 8004dce:	eba8 0800 	sub.w	r8, r8, r0
 8004dd2:	e7e7      	b.n	8004da4 <__sflush_r+0xd4>
 8004dd4:	dfbffffe 	.word	0xdfbffffe

08004dd8 <_fflush_r>:
 8004dd8:	b538      	push	{r3, r4, r5, lr}
 8004dda:	690b      	ldr	r3, [r1, #16]
 8004ddc:	4605      	mov	r5, r0
 8004dde:	460c      	mov	r4, r1
 8004de0:	b913      	cbnz	r3, 8004de8 <_fflush_r+0x10>
 8004de2:	2500      	movs	r5, #0
 8004de4:	4628      	mov	r0, r5
 8004de6:	bd38      	pop	{r3, r4, r5, pc}
 8004de8:	b118      	cbz	r0, 8004df2 <_fflush_r+0x1a>
 8004dea:	6a03      	ldr	r3, [r0, #32]
 8004dec:	b90b      	cbnz	r3, 8004df2 <_fflush_r+0x1a>
 8004dee:	f7ff f913 	bl	8004018 <__sinit>
 8004df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0f3      	beq.n	8004de2 <_fflush_r+0xa>
 8004dfa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004dfc:	07d0      	lsls	r0, r2, #31
 8004dfe:	d404      	bmi.n	8004e0a <_fflush_r+0x32>
 8004e00:	0599      	lsls	r1, r3, #22
 8004e02:	d402      	bmi.n	8004e0a <_fflush_r+0x32>
 8004e04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e06:	f7ff fa40 	bl	800428a <__retarget_lock_acquire_recursive>
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	4621      	mov	r1, r4
 8004e0e:	f7ff ff5f 	bl	8004cd0 <__sflush_r>
 8004e12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e14:	07da      	lsls	r2, r3, #31
 8004e16:	4605      	mov	r5, r0
 8004e18:	d4e4      	bmi.n	8004de4 <_fflush_r+0xc>
 8004e1a:	89a3      	ldrh	r3, [r4, #12]
 8004e1c:	059b      	lsls	r3, r3, #22
 8004e1e:	d4e1      	bmi.n	8004de4 <_fflush_r+0xc>
 8004e20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e22:	f7ff fa33 	bl	800428c <__retarget_lock_release_recursive>
 8004e26:	e7dd      	b.n	8004de4 <_fflush_r+0xc>

08004e28 <__swbuf_r>:
 8004e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2a:	460e      	mov	r6, r1
 8004e2c:	4614      	mov	r4, r2
 8004e2e:	4605      	mov	r5, r0
 8004e30:	b118      	cbz	r0, 8004e3a <__swbuf_r+0x12>
 8004e32:	6a03      	ldr	r3, [r0, #32]
 8004e34:	b90b      	cbnz	r3, 8004e3a <__swbuf_r+0x12>
 8004e36:	f7ff f8ef 	bl	8004018 <__sinit>
 8004e3a:	69a3      	ldr	r3, [r4, #24]
 8004e3c:	60a3      	str	r3, [r4, #8]
 8004e3e:	89a3      	ldrh	r3, [r4, #12]
 8004e40:	071a      	lsls	r2, r3, #28
 8004e42:	d501      	bpl.n	8004e48 <__swbuf_r+0x20>
 8004e44:	6923      	ldr	r3, [r4, #16]
 8004e46:	b943      	cbnz	r3, 8004e5a <__swbuf_r+0x32>
 8004e48:	4621      	mov	r1, r4
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	f000 f82a 	bl	8004ea4 <__swsetup_r>
 8004e50:	b118      	cbz	r0, 8004e5a <__swbuf_r+0x32>
 8004e52:	f04f 37ff 	mov.w	r7, #4294967295
 8004e56:	4638      	mov	r0, r7
 8004e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	6922      	ldr	r2, [r4, #16]
 8004e5e:	1a98      	subs	r0, r3, r2
 8004e60:	6963      	ldr	r3, [r4, #20]
 8004e62:	b2f6      	uxtb	r6, r6
 8004e64:	4283      	cmp	r3, r0
 8004e66:	4637      	mov	r7, r6
 8004e68:	dc05      	bgt.n	8004e76 <__swbuf_r+0x4e>
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	f7ff ffb3 	bl	8004dd8 <_fflush_r>
 8004e72:	2800      	cmp	r0, #0
 8004e74:	d1ed      	bne.n	8004e52 <__swbuf_r+0x2a>
 8004e76:	68a3      	ldr	r3, [r4, #8]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	60a3      	str	r3, [r4, #8]
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	6022      	str	r2, [r4, #0]
 8004e82:	701e      	strb	r6, [r3, #0]
 8004e84:	6962      	ldr	r2, [r4, #20]
 8004e86:	1c43      	adds	r3, r0, #1
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d004      	beq.n	8004e96 <__swbuf_r+0x6e>
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	07db      	lsls	r3, r3, #31
 8004e90:	d5e1      	bpl.n	8004e56 <__swbuf_r+0x2e>
 8004e92:	2e0a      	cmp	r6, #10
 8004e94:	d1df      	bne.n	8004e56 <__swbuf_r+0x2e>
 8004e96:	4621      	mov	r1, r4
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f7ff ff9d 	bl	8004dd8 <_fflush_r>
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	d0d9      	beq.n	8004e56 <__swbuf_r+0x2e>
 8004ea2:	e7d6      	b.n	8004e52 <__swbuf_r+0x2a>

08004ea4 <__swsetup_r>:
 8004ea4:	b538      	push	{r3, r4, r5, lr}
 8004ea6:	4b29      	ldr	r3, [pc, #164]	@ (8004f4c <__swsetup_r+0xa8>)
 8004ea8:	4605      	mov	r5, r0
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	460c      	mov	r4, r1
 8004eae:	b118      	cbz	r0, 8004eb8 <__swsetup_r+0x14>
 8004eb0:	6a03      	ldr	r3, [r0, #32]
 8004eb2:	b90b      	cbnz	r3, 8004eb8 <__swsetup_r+0x14>
 8004eb4:	f7ff f8b0 	bl	8004018 <__sinit>
 8004eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ebc:	0719      	lsls	r1, r3, #28
 8004ebe:	d422      	bmi.n	8004f06 <__swsetup_r+0x62>
 8004ec0:	06da      	lsls	r2, r3, #27
 8004ec2:	d407      	bmi.n	8004ed4 <__swsetup_r+0x30>
 8004ec4:	2209      	movs	r2, #9
 8004ec6:	602a      	str	r2, [r5, #0]
 8004ec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ecc:	81a3      	strh	r3, [r4, #12]
 8004ece:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed2:	e033      	b.n	8004f3c <__swsetup_r+0x98>
 8004ed4:	0758      	lsls	r0, r3, #29
 8004ed6:	d512      	bpl.n	8004efe <__swsetup_r+0x5a>
 8004ed8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004eda:	b141      	cbz	r1, 8004eee <__swsetup_r+0x4a>
 8004edc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ee0:	4299      	cmp	r1, r3
 8004ee2:	d002      	beq.n	8004eea <__swsetup_r+0x46>
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	f7ff f9d3 	bl	8004290 <_free_r>
 8004eea:	2300      	movs	r3, #0
 8004eec:	6363      	str	r3, [r4, #52]	@ 0x34
 8004eee:	89a3      	ldrh	r3, [r4, #12]
 8004ef0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004ef4:	81a3      	strh	r3, [r4, #12]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	6063      	str	r3, [r4, #4]
 8004efa:	6923      	ldr	r3, [r4, #16]
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	89a3      	ldrh	r3, [r4, #12]
 8004f00:	f043 0308 	orr.w	r3, r3, #8
 8004f04:	81a3      	strh	r3, [r4, #12]
 8004f06:	6923      	ldr	r3, [r4, #16]
 8004f08:	b94b      	cbnz	r3, 8004f1e <__swsetup_r+0x7a>
 8004f0a:	89a3      	ldrh	r3, [r4, #12]
 8004f0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f14:	d003      	beq.n	8004f1e <__swsetup_r+0x7a>
 8004f16:	4621      	mov	r1, r4
 8004f18:	4628      	mov	r0, r5
 8004f1a:	f000 f8a5 	bl	8005068 <__smakebuf_r>
 8004f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f22:	f013 0201 	ands.w	r2, r3, #1
 8004f26:	d00a      	beq.n	8004f3e <__swsetup_r+0x9a>
 8004f28:	2200      	movs	r2, #0
 8004f2a:	60a2      	str	r2, [r4, #8]
 8004f2c:	6962      	ldr	r2, [r4, #20]
 8004f2e:	4252      	negs	r2, r2
 8004f30:	61a2      	str	r2, [r4, #24]
 8004f32:	6922      	ldr	r2, [r4, #16]
 8004f34:	b942      	cbnz	r2, 8004f48 <__swsetup_r+0xa4>
 8004f36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004f3a:	d1c5      	bne.n	8004ec8 <__swsetup_r+0x24>
 8004f3c:	bd38      	pop	{r3, r4, r5, pc}
 8004f3e:	0799      	lsls	r1, r3, #30
 8004f40:	bf58      	it	pl
 8004f42:	6962      	ldrpl	r2, [r4, #20]
 8004f44:	60a2      	str	r2, [r4, #8]
 8004f46:	e7f4      	b.n	8004f32 <__swsetup_r+0x8e>
 8004f48:	2000      	movs	r0, #0
 8004f4a:	e7f7      	b.n	8004f3c <__swsetup_r+0x98>
 8004f4c:	2000001c 	.word	0x2000001c

08004f50 <memmove>:
 8004f50:	4288      	cmp	r0, r1
 8004f52:	b510      	push	{r4, lr}
 8004f54:	eb01 0402 	add.w	r4, r1, r2
 8004f58:	d902      	bls.n	8004f60 <memmove+0x10>
 8004f5a:	4284      	cmp	r4, r0
 8004f5c:	4623      	mov	r3, r4
 8004f5e:	d807      	bhi.n	8004f70 <memmove+0x20>
 8004f60:	1e43      	subs	r3, r0, #1
 8004f62:	42a1      	cmp	r1, r4
 8004f64:	d008      	beq.n	8004f78 <memmove+0x28>
 8004f66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f6e:	e7f8      	b.n	8004f62 <memmove+0x12>
 8004f70:	4402      	add	r2, r0
 8004f72:	4601      	mov	r1, r0
 8004f74:	428a      	cmp	r2, r1
 8004f76:	d100      	bne.n	8004f7a <memmove+0x2a>
 8004f78:	bd10      	pop	{r4, pc}
 8004f7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f82:	e7f7      	b.n	8004f74 <memmove+0x24>

08004f84 <_sbrk_r>:
 8004f84:	b538      	push	{r3, r4, r5, lr}
 8004f86:	4d06      	ldr	r5, [pc, #24]	@ (8004fa0 <_sbrk_r+0x1c>)
 8004f88:	2300      	movs	r3, #0
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	4608      	mov	r0, r1
 8004f8e:	602b      	str	r3, [r5, #0]
 8004f90:	f7fc fc66 	bl	8001860 <_sbrk>
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	d102      	bne.n	8004f9e <_sbrk_r+0x1a>
 8004f98:	682b      	ldr	r3, [r5, #0]
 8004f9a:	b103      	cbz	r3, 8004f9e <_sbrk_r+0x1a>
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	bd38      	pop	{r3, r4, r5, pc}
 8004fa0:	20000268 	.word	0x20000268

08004fa4 <memcpy>:
 8004fa4:	440a      	add	r2, r1
 8004fa6:	4291      	cmp	r1, r2
 8004fa8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fac:	d100      	bne.n	8004fb0 <memcpy+0xc>
 8004fae:	4770      	bx	lr
 8004fb0:	b510      	push	{r4, lr}
 8004fb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fba:	4291      	cmp	r1, r2
 8004fbc:	d1f9      	bne.n	8004fb2 <memcpy+0xe>
 8004fbe:	bd10      	pop	{r4, pc}

08004fc0 <_realloc_r>:
 8004fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fc4:	4680      	mov	r8, r0
 8004fc6:	4615      	mov	r5, r2
 8004fc8:	460c      	mov	r4, r1
 8004fca:	b921      	cbnz	r1, 8004fd6 <_realloc_r+0x16>
 8004fcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd0:	4611      	mov	r1, r2
 8004fd2:	f7ff b9c9 	b.w	8004368 <_malloc_r>
 8004fd6:	b92a      	cbnz	r2, 8004fe4 <_realloc_r+0x24>
 8004fd8:	f7ff f95a 	bl	8004290 <_free_r>
 8004fdc:	2400      	movs	r4, #0
 8004fde:	4620      	mov	r0, r4
 8004fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fe4:	f000 f89e 	bl	8005124 <_malloc_usable_size_r>
 8004fe8:	4285      	cmp	r5, r0
 8004fea:	4606      	mov	r6, r0
 8004fec:	d802      	bhi.n	8004ff4 <_realloc_r+0x34>
 8004fee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004ff2:	d8f4      	bhi.n	8004fde <_realloc_r+0x1e>
 8004ff4:	4629      	mov	r1, r5
 8004ff6:	4640      	mov	r0, r8
 8004ff8:	f7ff f9b6 	bl	8004368 <_malloc_r>
 8004ffc:	4607      	mov	r7, r0
 8004ffe:	2800      	cmp	r0, #0
 8005000:	d0ec      	beq.n	8004fdc <_realloc_r+0x1c>
 8005002:	42b5      	cmp	r5, r6
 8005004:	462a      	mov	r2, r5
 8005006:	4621      	mov	r1, r4
 8005008:	bf28      	it	cs
 800500a:	4632      	movcs	r2, r6
 800500c:	f7ff ffca 	bl	8004fa4 <memcpy>
 8005010:	4621      	mov	r1, r4
 8005012:	4640      	mov	r0, r8
 8005014:	f7ff f93c 	bl	8004290 <_free_r>
 8005018:	463c      	mov	r4, r7
 800501a:	e7e0      	b.n	8004fde <_realloc_r+0x1e>

0800501c <__swhatbuf_r>:
 800501c:	b570      	push	{r4, r5, r6, lr}
 800501e:	460c      	mov	r4, r1
 8005020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005024:	2900      	cmp	r1, #0
 8005026:	b096      	sub	sp, #88	@ 0x58
 8005028:	4615      	mov	r5, r2
 800502a:	461e      	mov	r6, r3
 800502c:	da0d      	bge.n	800504a <__swhatbuf_r+0x2e>
 800502e:	89a3      	ldrh	r3, [r4, #12]
 8005030:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005034:	f04f 0100 	mov.w	r1, #0
 8005038:	bf14      	ite	ne
 800503a:	2340      	movne	r3, #64	@ 0x40
 800503c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005040:	2000      	movs	r0, #0
 8005042:	6031      	str	r1, [r6, #0]
 8005044:	602b      	str	r3, [r5, #0]
 8005046:	b016      	add	sp, #88	@ 0x58
 8005048:	bd70      	pop	{r4, r5, r6, pc}
 800504a:	466a      	mov	r2, sp
 800504c:	f000 f848 	bl	80050e0 <_fstat_r>
 8005050:	2800      	cmp	r0, #0
 8005052:	dbec      	blt.n	800502e <__swhatbuf_r+0x12>
 8005054:	9901      	ldr	r1, [sp, #4]
 8005056:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800505a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800505e:	4259      	negs	r1, r3
 8005060:	4159      	adcs	r1, r3
 8005062:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005066:	e7eb      	b.n	8005040 <__swhatbuf_r+0x24>

08005068 <__smakebuf_r>:
 8005068:	898b      	ldrh	r3, [r1, #12]
 800506a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800506c:	079d      	lsls	r5, r3, #30
 800506e:	4606      	mov	r6, r0
 8005070:	460c      	mov	r4, r1
 8005072:	d507      	bpl.n	8005084 <__smakebuf_r+0x1c>
 8005074:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005078:	6023      	str	r3, [r4, #0]
 800507a:	6123      	str	r3, [r4, #16]
 800507c:	2301      	movs	r3, #1
 800507e:	6163      	str	r3, [r4, #20]
 8005080:	b003      	add	sp, #12
 8005082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005084:	ab01      	add	r3, sp, #4
 8005086:	466a      	mov	r2, sp
 8005088:	f7ff ffc8 	bl	800501c <__swhatbuf_r>
 800508c:	9f00      	ldr	r7, [sp, #0]
 800508e:	4605      	mov	r5, r0
 8005090:	4639      	mov	r1, r7
 8005092:	4630      	mov	r0, r6
 8005094:	f7ff f968 	bl	8004368 <_malloc_r>
 8005098:	b948      	cbnz	r0, 80050ae <__smakebuf_r+0x46>
 800509a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800509e:	059a      	lsls	r2, r3, #22
 80050a0:	d4ee      	bmi.n	8005080 <__smakebuf_r+0x18>
 80050a2:	f023 0303 	bic.w	r3, r3, #3
 80050a6:	f043 0302 	orr.w	r3, r3, #2
 80050aa:	81a3      	strh	r3, [r4, #12]
 80050ac:	e7e2      	b.n	8005074 <__smakebuf_r+0xc>
 80050ae:	89a3      	ldrh	r3, [r4, #12]
 80050b0:	6020      	str	r0, [r4, #0]
 80050b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050b6:	81a3      	strh	r3, [r4, #12]
 80050b8:	9b01      	ldr	r3, [sp, #4]
 80050ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80050be:	b15b      	cbz	r3, 80050d8 <__smakebuf_r+0x70>
 80050c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050c4:	4630      	mov	r0, r6
 80050c6:	f000 f81d 	bl	8005104 <_isatty_r>
 80050ca:	b128      	cbz	r0, 80050d8 <__smakebuf_r+0x70>
 80050cc:	89a3      	ldrh	r3, [r4, #12]
 80050ce:	f023 0303 	bic.w	r3, r3, #3
 80050d2:	f043 0301 	orr.w	r3, r3, #1
 80050d6:	81a3      	strh	r3, [r4, #12]
 80050d8:	89a3      	ldrh	r3, [r4, #12]
 80050da:	431d      	orrs	r5, r3
 80050dc:	81a5      	strh	r5, [r4, #12]
 80050de:	e7cf      	b.n	8005080 <__smakebuf_r+0x18>

080050e0 <_fstat_r>:
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	4d07      	ldr	r5, [pc, #28]	@ (8005100 <_fstat_r+0x20>)
 80050e4:	2300      	movs	r3, #0
 80050e6:	4604      	mov	r4, r0
 80050e8:	4608      	mov	r0, r1
 80050ea:	4611      	mov	r1, r2
 80050ec:	602b      	str	r3, [r5, #0]
 80050ee:	f7fc fb8e 	bl	800180e <_fstat>
 80050f2:	1c43      	adds	r3, r0, #1
 80050f4:	d102      	bne.n	80050fc <_fstat_r+0x1c>
 80050f6:	682b      	ldr	r3, [r5, #0]
 80050f8:	b103      	cbz	r3, 80050fc <_fstat_r+0x1c>
 80050fa:	6023      	str	r3, [r4, #0]
 80050fc:	bd38      	pop	{r3, r4, r5, pc}
 80050fe:	bf00      	nop
 8005100:	20000268 	.word	0x20000268

08005104 <_isatty_r>:
 8005104:	b538      	push	{r3, r4, r5, lr}
 8005106:	4d06      	ldr	r5, [pc, #24]	@ (8005120 <_isatty_r+0x1c>)
 8005108:	2300      	movs	r3, #0
 800510a:	4604      	mov	r4, r0
 800510c:	4608      	mov	r0, r1
 800510e:	602b      	str	r3, [r5, #0]
 8005110:	f7fc fb8d 	bl	800182e <_isatty>
 8005114:	1c43      	adds	r3, r0, #1
 8005116:	d102      	bne.n	800511e <_isatty_r+0x1a>
 8005118:	682b      	ldr	r3, [r5, #0]
 800511a:	b103      	cbz	r3, 800511e <_isatty_r+0x1a>
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	bd38      	pop	{r3, r4, r5, pc}
 8005120:	20000268 	.word	0x20000268

08005124 <_malloc_usable_size_r>:
 8005124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005128:	1f18      	subs	r0, r3, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	bfbc      	itt	lt
 800512e:	580b      	ldrlt	r3, [r1, r0]
 8005130:	18c0      	addlt	r0, r0, r3
 8005132:	4770      	bx	lr

08005134 <_init>:
 8005134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005136:	bf00      	nop
 8005138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800513a:	bc08      	pop	{r3}
 800513c:	469e      	mov	lr, r3
 800513e:	4770      	bx	lr

08005140 <_fini>:
 8005140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005142:	bf00      	nop
 8005144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005146:	bc08      	pop	{r3}
 8005148:	469e      	mov	lr, r3
 800514a:	4770      	bx	lr
